[
  {
    "_deleted": false,
    "crdts": {
      "operations": [
        [
          {
            "creator": "dyxxejjfqh",
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "id": "1zsMf0xH9C",
                    "type": "code",
                    "data": {
                      "code": "",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "createdBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "topic": "3cd7d7e0-876f-406a-9662-8819bca34450"
                  }
                }
              }
            ],
            "time": 1684385664841.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconst animation = {\n   \"onInit\": {},\n   \"onExec\": {\n      \"unlimited\": true,\n      \"frames\": Immutable.Range(0,90).map(grades => ({\n              \"dynamixel_id\": 2,\n              grades,\n              \"speed\": 512,\n              \"degrees\": true,\n              \"time\": 0\n      }))\n   },\n  \"onDestroy\": {}\n}\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684385669007.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconst animation = {\n   \"onInit\": {},\n   \"onExec\": {\n      \"unlimited\": true,\n      \"frames\": Immutable.Range(0,90).map(grades => ({\n              \"dynamixel_id\": 2,\n              grades,\n              \"speed\": 512,\n              \"degrees\": true,\n              \"time\": 0\n      }))\n   },\n  \"onDestroy\": {}\n}\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684385669939.01
          },
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": -1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385669531.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconst animation = {\n   \"onInit\": {},\n   \"onExec\": {\n      \"unlimited\": true,\n      \"frames\": Immutable.Range(0,90).map(grades => ({\n              \"dynamixel_id\": 2,\n              grades,\n              \"speed\": 512,\n              \"degrees\": true,\n              \"time\": 0\n      }))\n   },\n  \"onDestroy\": {}\n}\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": -1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684385671361.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684385677116.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconst animation = {\n   \"onInit\": {},\n   \"onExec\": {\n      \"unlimited\": true,\n      \"frames\": Immutable.Range(0,90).map(grades => ({\n              \"dynamixel_id\": 2,\n              grades,\n              \"speed\": 512,\n              \"degrees\": true,\n              \"time\": 0\n      }))\n   },\n  \"onDestroy\": {}\n}\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684385677760.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconst animation = {\n   \"onInit\": {},\n   \"onExec\": {\n      \"unlimited\": true,\n      \"frames\": Immutable.Range(0,90).map(grades => ({\n              \"dynamixel_id\": 2,\n              grades,\n              \"speed\": 512,\n              \"degrees\": true,\n              \"time\": 0\n      }))\n   },\n  \"onDestroy\": {}\n}\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684385680060.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 444,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconst animation = {\n   \"onInit\": {},\n   \"onExec\": {\n      \"unlimited\": true,\n      \"frames\": Immutable.Range(0,90).map(grades => ({\n              \"dynamixel_id\": 2,\n              grades,\n              \"speed\": 512,\n              \"degrees\": true,\n              \"time\": 0\n      }))\n   },\n  \"onDestroy\": {}\n}\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385698524.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconst animation = {\n   \"onInit\": {},\n   \"onExec\": {\n      \"unlimited\": true,\n      \"frames\": Immutable.Range(0,90).map(grades => ({\n              \"dynamixel_id\": 2,\n              grades,\n              \"speed\": 512,\n              \"degrees\": true,\n              \"time\": 0\n      }))\n   },\n  \"onDestroy\": {}\n}\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": -1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684385699766.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 444,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconst animation = {\n   \"onInit\": {},\n   \"onExec\": {\n      \"unlimited\": true,\n      \"frames\": Immutable.Range(0,90).map(grades => ({\n              \"dynamixel_id\": 2,\n              grades,\n              \"speed\": 512,\n              \"degrees\": true,\n              \"time\": 0\n      }))\n   },\n  \"onDestroy\": {}\n}\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": -1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385699932.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconst animation = {\n   \"onInit\": {},\n   \"onExec\": {\n      \"unlimited\": true,\n      \"frames\": Immutable.Range(0,90).map(grades => ({\n              \"dynamixel_id\": 2,\n              grades,\n              \"speed\": 512,\n              \"degrees\": true,\n              \"time\": 0\n      }))\n   },\n  \"onDestroy\": {}\n}\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385702772.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 444,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconst animation = {\n   \"onInit\": {},\n   \"onExec\": {\n      \"unlimited\": true,\n      \"frames\": Immutable.Range(0,90).map(grades => ({\n              \"dynamixel_id\": 2,\n              grades,\n              \"speed\": 512,\n              \"degrees\": true,\n              \"time\": 0\n      }))\n   },\n  \"onDestroy\": {}\n}\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385703836.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 4452,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconst animation = {\n   \"onInit\": {},\n   \"onExec\": {\n      \"unlimited\": true,\n      \"frames\": Immutable.Range(0,90).map(grades => ({\n              \"dynamixel_id\": 2,\n              grades,\n              \"speed\": 512,\n              \"degrees\": true,\n              \"time\": 0\n      }))\n   },\n  \"onDestroy\": {}\n}\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385706452.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 445,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconst animation = {\n   \"onInit\": {},\n   \"onExec\": {\n      \"unlimited\": true,\n      \"frames\": Immutable.Range(0,90).map(grades => ({\n              \"dynamixel_id\": 2,\n              grades,\n              \"speed\": 512,\n              \"degrees\": true,\n              \"time\": 0\n      }))\n   },\n  \"onDestroy\": {}\n}\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385707004.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 444,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconst animation = {\n   \"onInit\": {},\n   \"onExec\": {\n      \"unlimited\": true,\n      \"frames\": Immutable.Range(0,90).map(grades => ({\n              \"dynamixel_id\": 2,\n              grades,\n              \"speed\": 512,\n              \"degrees\": true,\n              \"time\": 0\n      }))\n   },\n  \"onDestroy\": {}\n}\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385709828.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconst animation = {\n   \"onInit\": {},\n   \"onExec\": {\n      \"unlimited\": true,\n      \"frames\": Immutable.Range(0,90).map(grades => ({\n              \"dynamixel_id\": 2,\n              grades,\n              \"speed\": 512,\n              \"degrees\": true,\n              \"time\": 0\n      }))\n   },\n  \"onDestroy\": {}\n}\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385713867.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385741228.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385741774.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  \n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385850276.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  map\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385852852.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  map(x )\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385854748.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  conca\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385856524.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(x)\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385858340.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap()\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385859499.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(c)\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385860267.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(c =)\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385861171.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(c => {\n    return c\n  })\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385863739.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(c => {\n    return c\n  });\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385865723.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(c => {\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385868900.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(c => {\n    awa\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385870108.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(c => {\n    await \n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385870899.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap((c) => {\n    await \n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385873540.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(asu(c) => {\n    await \n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385874836.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    await \n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385876145.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    await connection.send({topic: \"eva/neck/animation\", message:  distance > 0 ? \"l\" : \"r\"})\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385877348.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    await \n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385877979.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    await new Promise(resolve =)\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385882155.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    await new Promise(resolve => )\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385882819.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    await new Promise(resolve => setTimeout())\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385887028.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    await new Promise(resolve => setTimeout(resolve =))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385888636.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    await new Promise(resolve => setTimeout())\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385890276.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    await new Promise(resolve => setTimeout(resolve, ))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385892195.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    await new Promise(resolve => setTimeout(resolve, 5000))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385893348.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    await new Promise(resolve => setTimeout(resolve, 1000))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385895228.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385897419.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    connection.send({topic: \"eva/neck/animation\", message:  distance > 0 ? \"l\" : \"r\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385899964.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  distance > 0 ? \"l\" : \"r\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385913668.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385918435.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \" \"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385924051.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385924931.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684385952444.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \" ya es este de aqui,\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684385982338.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \" ya es este de aqui\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684385982947.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \" ya es este de aqui,\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": -1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385983452.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \" ya es este de aqui\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": -1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684385985090.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \" ya es este de aqui,\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684385987225.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \" ya es este de aqui,si es el nuevo que saque en la tarde\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684385997291.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \" ya es este de aqui,si es el nuevo que saque en la tard\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684385999363.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684386002014.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple creo que aqui le tenias que poner la x\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684386035063.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": -1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386036447.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple creo que aqui le tenias que poner la x\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": -1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684386038244.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684386040818.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple creo que aqui le tenias que poner la x\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": -1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386041492.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": -1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684386043146.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple creo que aqui le tenias que poner la x\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684386046703.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386056780.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple creo que aqui le tenias que poner la x\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": -1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684386060573.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": -1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386061107.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+\" banana and apple creo que aqui le tenias que poner la x\"+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386068876.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386071516.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to re in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386107710.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to food in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": -1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684386111543.01
          },
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes  in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386108956.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possible in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386111732.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possibly in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386114788.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possibly  in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386119452.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possibly in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386121867.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possibly  in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386123722.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possibly in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386124636.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possibly in the image. \"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386126667.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possibly in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386128460.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possibly in the image. \"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386130940.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possibly in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386138851.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possible in the image.\"),\n       gpt({\n          token: \"\"\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386146004.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possible in the image.\"),\n       gpt({\n          token: environment.OpenAIToken\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386626972.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image'\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possible in the image.\"),\n       gpt({\n          token: environment.OpenAIToken\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386652764.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  hostname: '',\n  port: 443,\n  path: '/',\n  topic: 'eva/camera/image',\n  protocol: \"wss\",\n  username: \"\",\n  password: \"\"\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possible in the image.\"),\n       gpt({\n          token: environment.OpenAIToken\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": -1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684386655056.01
          },
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  ...\n  topic: 'eva/camera/image'\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possible in the image.\"),\n       gpt({\n          token: environment.OpenAIToken\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386656868.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  ...environment.mqtt\n  topic: 'eva/camera/image'\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possible in the image.\"),\n       gpt({\n          token: environment.OpenAIToken\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386669156.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  ...environment.mqtt,\n  topic: 'eva/camera/image'\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + ''\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possible in the image.\"),\n       gpt({\n          token: environment.OpenAIToken\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386670652.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  ...environment.mqtt,\n  topic: 'eva/camera/image'\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + \n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possible in the image.\"),\n       gpt({\n          token: environment.OpenAIToken\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386727395.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  ...environment.mqtt,\n  topic: 'eva/camera/image'\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + environment.CLARIFY_TOKEN\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n    protocol: \"wss\",\n    username: \"\",\n    password: \"\"\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possible in the image.\"),\n       gpt({\n          token: environment.OpenAIToken\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386736188.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  ...environment.mqtt,\n  topic: 'eva/camera/image'\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + environment.CLARIFY_TOKEN\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    hostname: '',\n    port: 443,\n    path: '/',\n    topic: 'hermes/intent/Cook',\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possible in the image.\"),\n       gpt({\n          token: environment.OpenAIToken\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386750439.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  ...environment.mqtt,\n  topic: 'eva/camera/image'\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + environment.CLARIFY_TOKEN\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    ...environment.mqtt,\n    topic: 'hermes/intent/Cook',\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possible in the image.\"),\n       gpt({\n          token: environment.OpenAIToken\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386752188.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  ...environment.mqtt,\n  topic: 'eva/camera/image'\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + environment.CLARIFY_TOKEN\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    ...environment.mqtt,\n    topic: 'hermes/intent/Cook'\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possible in the image.\"),\n       gpt({\n          token: environment.OpenAIToken\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386753947.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const camera = connect(\"MQTT\", {\n  ...environment.mqtt,\n  topic: 'eva/camera/image'\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + environment.CLARIFY_TOKEN\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n    \n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    ...environment.mqtt,\n    topic: 'hermes/intent/Cook'\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possible in the image.\"),\n       gpt({\n          token: environment.OpenAIToken\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386789444.02
          }
        ]
      ],
      "hash": "3d4bab2d4939e14689560c0dedb6abd26093a29d8c38d5924a344694a539e828"
    },
    "id": "1zsMf0xH9C",
    "type": "code",
    "data": {
      "code": "const camera = connect(\"MQTT\", {\n  ...environment.mqtt,\n  topic: 'eva/camera/image'\n}).pipe(map(x => x.message), filter(x => x), first())\n\nconst recognizeFoodItems = (base64) => fromFetch(`https://api.clarifai.com/v2/models/food-item-v1-recognition/versions/dfebc169854e429086aceb8368662641/outputs`, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + environment.CLARIFY_TOKEN\n    },\n    body: JSON.stringify({\n  \"user_app_id\": {\n    \"user_id\": \"clarifai\",\n    \"app_id\": \"main\",\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                 base64\n              }\n          }\n      }\n    \n  ]\n})\n})\n\nconnect(\"MQTT\", {\n    ...environment.mqtt,\n    topic: 'hermes/intent/Cook'\n}).pipe(\n  filter(c => c.message),\n  concatMap(async (c) => {\n    c.connection.send({topic: \"eva/neck/animation\", message:  \"d\"})\n    await new Promise(resolve => setTimeout(resolve, 500))\n    return c\n  }),\n  switchMap(c => camera.pipe(\n       switchMap(base64 => recognizeFoodItems(base64)),\n       map(x=>x.outputs[0].data.concepts.map(y=>[y.name,y.value]).filter(y => y[1] > 0.2)),\n       filter(x => x.length > 0),\n       map(x => x.map(y => y[0]).join(\",\")),\n       map(x => 'Write a list of 5 possible recipes with '+x+\". Write only the recipe's name. I'm not an expert cooker. Write the recipes in Spanish. Dont write any English words. Please limit to recipes really possible in the image.\"),\n       gpt({\n          token: environment.OpenAIToken\n       }),\n       map(x => x.replace(/\\d\\./gm, \"\").replace(/\\n/gm, \",\").trim()),\n       map(x => \"Lo que puedes cocinar con estos ingredientes son las siguientes recetas: \"+x),\n       map(text => c.message = {topic: \"hermes/tts/say\", message: serialize({text})}),\n       map(_ => c)\n  )),\n  sendOverProtocol\n) ",
      "language": "javascript",
      "output": ""
    },
    "index": 1,
    "createdBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
    "topic": "3cd7d7e0-876f-406a-9662-8819bca34450",
    "_attachments": {},
    "_meta": {
      "lwt": 1684386791335.02
    },
    "_rev": "85-qwhwmtotal"
  },
  {
    "id": "GbneHr0Cq3",
    "type": "header",
    "data": {
      "text": "Food API",
      "level": 2
    },
    "index": 1,
    "createdBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
    "topic": "3cd7d7e0-876f-406a-9662-8819bca34450",
    "crdts": {
      "operations": [
        [
          {
            "creator": "dyxxejjfqh",
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "id": "GbneHr0Cq3",
                    "type": "header",
                    "data": {
                      "text": "",
                      "level": 2
                    },
                    "index": 1,
                    "createdBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "topic": "3cd7d7e0-876f-406a-9662-8819bca34450"
                  }
                }
              }
            ],
            "time": 1684385559119.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "text": "Food",
                      "level": 2
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385564268.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "text": "Food&nbsp;",
                      "level": 2
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385565395.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "text": "Food",
                      "level": 2
                    },
                    "index": 1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385565875.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "text": "Food&nbsp;",
                      "level": 2
                    },
                    "index": 0,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385569756.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "text": "Food A",
                      "level": 2
                    },
                    "index": 0,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385570411.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "text": "Food AOU",
                      "level": 2
                    },
                    "index": 0,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385571171.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "text": "Food API",
                      "level": 2
                    },
                    "index": 0,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385572212.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684385584383.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684385608850.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "id": "GbneHr0Cq3",
                    "type": "header",
                    "data": {
                      "text": "Food API",
                      "level": 2
                    },
                    "index": 0,
                    "createdBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "topic": "3cd7d7e0-876f-406a-9662-8819bca34450"
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385610037.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684385612092.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "id": "GbneHr0Cq3",
                    "type": "header",
                    "data": {
                      "text": "Food API",
                      "level": 2
                    },
                    "index": 0,
                    "createdBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "topic": "3cd7d7e0-876f-406a-9662-8819bca34450"
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385613325.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684385616125.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "id": "GbneHr0Cq3",
                    "type": "header",
                    "data": {
                      "text": "Food API",
                      "level": 2
                    },
                    "index": 0,
                    "createdBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "topic": "3cd7d7e0-876f-406a-9662-8819bca34450"
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684385617194.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684385659106.03
          }
        ]
      ],
      "hash": "31a04ee9f63915390d849f0b0c3c724176d5670cbd93084e868ca623b0f89bc1"
    },
    "_deleted": false,
    "_attachments": {},
    "_meta": {
      "lwt": 1684385659109.01
    },
    "_rev": "16-qwhwmtotal"
  },
  {
    "id": "GGDXObFIDV",
    "type": "header",
    "data": {
      "text": "Replication",
      "level": 2
    },
    "index": 2,
    "createdBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
    "topic": "3cd7d7e0-876f-406a-9662-8819bca34450",
    "crdts": {
      "operations": [
        [
          {
            "creator": "dyxxejjfqh",
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "id": "GGDXObFIDV",
                    "type": "header",
                    "data": {
                      "text": "",
                      "level": 2
                    },
                    "index": 2,
                    "createdBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "topic": "3cd7d7e0-876f-406a-9662-8819bca34450"
                  }
                }
              }
            ],
            "time": 1684386795403.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "text": "Replication",
                      "level": 2
                    },
                    "index": 2,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386798571.05
          }
        ]
      ],
      "hash": "0fb0faa42e6d3abc2be45e8fd4dea50210273dd69f4afeb45180a46748850e06"
    },
    "_deleted": false,
    "_attachments": {},
    "_meta": {
      "lwt": 1684386799076.02
    },
    "_rev": "2-qwhwmtotal"
  },
  {
    "_deleted": false,
    "crdts": {
      "operations": [
        [
          {
            "creator": "dyxxejjfqh",
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "id": "Tt-A6VRAqR",
                    "type": "code",
                    "data": {
                      "code": "",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "createdBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "topic": "3cd7d7e0-876f-406a-9662-8819bca34450"
                  }
                }
              }
            ],
            "time": 1684386802026.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\neditor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/1-server-replication.json\",\n    commitMessage: \"feat: replicate to GitHub and remove your token\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386811040.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\neditor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-server-replication.json\",\n    commitMessage: \"feat: replicate to GitHub and remove your token\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386823331.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\neditor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-food.json\",\n    commitMessage: \"feat: replicate to GitHub and remove your token\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386860587.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\neditor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-recfood.json\",\n    commitMessage: \"feat: replicate to GitHub and remove your token\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386866571.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\neditor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-food.json\",\n    commitMessage: \"feat: replicate to GitHub and remove your token\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386867739.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\neditor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-getfood.json\",\n    commitMessage: \"feat: replicate to GitHub and remove your token\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386868963.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\neditor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get0food.json\",\n    commitMessage: \"feat: replicate to GitHub and remove your token\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386869499.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\neditor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-food.json\",\n    commitMessage: \"feat: replicate to GitHub and remove your token\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386870387.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\neditor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-i-food.json\",\n    commitMessage: \"feat: replicate to GitHub and remove your token\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386874763.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\neditor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10--food.json\",\n    commitMessage: \"feat: replicate to GitHub and remove your token\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386875387.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\neditor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-food.json\",\n    commitMessage: \"feat: replicate to GitHub and remove your token\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386878516.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\neditor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes.json\",\n    commitMessage: \"feat: replicate to GitHub and remove your token\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386881787.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\neditor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate to GitHub and remove your token\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386885379.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\neditor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate to GitHub and remove your toke\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386887539.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\neditor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: \",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386889651.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\neditor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replciate\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386891251.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\neditor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate \",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386893123.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\neditor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386895027.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\neditor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate \",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386897803.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\neditor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386901612.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN;\nawait environment.wait()\n\neditor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386907955.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386912883.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                                      .replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386917339.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                        .replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386919307.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386922707.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\"))))\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386924459.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386927723.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386933043.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                                ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386934148.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386935875.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386941811.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                       .replaceAll(environment.GITHUB_TOKEN, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386942507.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386948315.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386950379.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386955075.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                       .replaceAll(environment.OpenAIToken, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386955555.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386956707.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386962019.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386967284.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386972331.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                      .replaceAll(environment./, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684386999715.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684387000891.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                      .replaceAll(environment./, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": -1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684387003995.01
          },
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                      .replaceAll(environment..mCLARIFY_TOKEN, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684387002787.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                      .replaceAll(environment.mqtt.CLARIFY_TOKEN, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684387004107.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                      .replaceAll(environment..mCLARIFY_TOKEN, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": -1,
                    "lastEditedBy": "2a14c213-54c6-490d-9ad1-e41768fc5448",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "aggyfxdopq",
            "time": 1684387006027.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                      .replaceAll(environment.mqtt.CLARIFY_TOKEN, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": -1,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684387006291.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                      .replaceAll(environment..mCLARIFY_TOKEN, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684387007019.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                      .replaceAll(environment.mqtt.CLARIFY_TOKEN, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684387011483.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                      .replaceAll(environment.mqtt., \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684387013795.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                      .replaceAll(environment.mqtt.j, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684387018491.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                      .replaceAll(environment.mqtt.host, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684387019571.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                      .replaceAll(environment.mqtt.hostname, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684387020379.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                      .replaceAll(environment.mqtt.hostname, \"\")\n                                  .replaceAll(environment.mqtt.hostname, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684387023283.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                      .replaceAll(environment.mqtt.hostname, \"\")\n                      .replaceAll(environment.mqtt.hostname, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684387025251.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                      .replaceAll(environment.mqtt.username, \"\")\n                      .replaceAll(environment.mqtt.hostname, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684387031347.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                      .replaceAll(environment.mqtt.username, \"\")\n                      .replaceAll(environment.mqtt.password, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684387038267.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                      .replaceAll(environment.mqtt.username, \"\")\n                      .replaceAll(environment.mqtt.username, \"\")\n                      .replaceAll(environment.mqtt.password, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684387045947.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                      .replaceAll(environment.mqtt.hostname, \"\")\n                      .replaceAll(environment.mqtt.username, \"\")\n                      .replaceAll(environment.mqtt.password, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "dyxxejjfqh",
            "time": 1684387052084.01
          }
        ]
      ],
      "hash": "a7186126361748d21d97cfb3f217e07f34420753be9d882a47faba879338babc"
    },
    "id": "Tt-A6VRAqR",
    "type": "code",
    "data": {
      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2)\n                      .replaceAll(environment.GITHUB_TOKEN, \"\")\n                      .replaceAll(environment.OpenAIToken, \"\")\n                      .replaceAll(environment.CLARIFY_TOKEN, \"\")\n                      .replaceAll(environment.mqtt.hostname, \"\")\n                      .replaceAll(environment.mqtt.username, \"\")\n                      .replaceAll(environment.mqtt.password, \"\")\n                    ))\n        )\n     ),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/10-get-recipes-from-ingredients.json\",\n    commitMessage: \"feat: replicate recipes problem\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
      "language": "javascript",
      "output": ""
    },
    "index": 3,
    "createdBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
    "lastEditedBy": "b138d9d3-5e73-4e35-9367-28d502376c17",
    "topic": "3cd7d7e0-876f-406a-9662-8819bca34450",
    "_attachments": {},
    "_meta": {
      "lwt": 1684387052976.01
    },
    "_rev": "59-qwhwmtotal"
  }
]
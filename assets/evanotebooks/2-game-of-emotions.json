[
  {
    "id": "65dx7yCdLL",
    "type": "code",
    "data": {
      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
      "language": "javascript",
      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
    },
    "index": 0,
    "createdBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
    "topic": "e8e141dd-68a7-4c29-af2c-11559f457520",
    "crdts": {
      "operations": [
        [
          {
            "creator": "pkhexmkwbs",
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "id": "65dx7yCdLL",
                    "type": "code",
                    "data": {
                      "code": "",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "createdBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "topic": "e8e141dd-68a7-4c29-af2c-11559f457520"
                  }
                }
              }
            ],
            "time": 1682752247664.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "X",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752253461.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752254392.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "``",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752296723.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n`",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752298040.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Countries</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752325972.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Countrie</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752330876.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1></h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752332002.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Emotions game</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752337507.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Emotion game</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752342207.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Emotion ame</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752348692.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752349933.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752352000.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752361728.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 5%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752441656.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 7%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752442552.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752443416.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752444285.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759073023.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682784466477.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786074953.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682788979532.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789985827.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 0%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789987075.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 00%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789987645.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789988963.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790271667.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790272595.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790280471.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790315786.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790356746.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790418008.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790421026.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790431289.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 0%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790433850.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790434654.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790435442.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790436348.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790602190.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790603143.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790609427.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790623480.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 80%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790624201.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 80%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790624980.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 80%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 80%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790625994.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 80%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790632287.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790632868.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790633707.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 60%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790647368.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790648433.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 80%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790649009.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 80%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790649869.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 80%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 80%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790650828.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790731967.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790732908.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790739279.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790878357.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791417414.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791420242.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791421202.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n   \n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794303135.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794304050.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794463703.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794474965.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794582154.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794587776.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794617786.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 1000%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794619347.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794620424.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794630386.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794641879.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794686523.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794692990.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794722270.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794755961.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794925126.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794962112.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794969462.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795031255.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795117066.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795355779.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795403992.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682833802747.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "`\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 100%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\">GitHub</nk-button>\n    </div>\n </nk-toolbar>\n`",
                      "language": "javascript",
                      "output": "\n <style>\n   .ce-block:first-of-type .ce-block__content,\n   .ce-toolbar__content {\n      max-width: 70%;\n   }\n </style>\n <nk-toolbar style=\"display: flex;justify-content:space-between;\" class=\"mat-toolbar mat-toolbar-single-row\" ng-version=\"15.2.5\">\n    <h1>Game of emotions</h1>\n    <div>\n      <nk-button mat-button=\"\" onclick=\"window.location.href='https://github.com/sanchezcarlosjr/evanotebook'\" target=\"_blank\" ng-version=\"15.2.5\" class=\"mdc-button mat-mdc-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\"><span class=\"mat-mdc-button-persistent-ripple mdc-button__ripple\"></span><span class=\"mdc-button__label\">GitHub</span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></nk-button>\n    </div>\n </nk-toolbar>\n"
                    },
                    "index": 0,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682833828906.01
          }
        ]
      ],
      "hash": "12ac851e07b57d5a8eddd0a08abc80423dd51f75fa87a171b0da2d109e43a6c6"
    },
    "_meta": {
      "lwt": 1682833828907.01
    },
    "_deleted": false,
    "_attachments": {},
    "_rev": "86-exrcyzpgzn"
  },
  {
    "id": "0UKuZsEHdH",
    "type": "header",
    "data": {
      "text": "Match your emotion with our request",
      "level": 1
    },
    "index": 1,
    "createdBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
    "topic": "e8e141dd-68a7-4c29-af2c-11559f457520",
    "crdts": {
      "operations": [
        [
          {
            "creator": "pkhexmkwbs",
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "id": "0UKuZsEHdH",
                    "type": "header",
                    "data": {
                      "text": "",
                      "level": 2
                    },
                    "index": 1,
                    "createdBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "topic": "e8e141dd-68a7-4c29-af2c-11559f457520"
                  }
                }
              }
            ],
            "time": 1682790653338.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "text": "Please be&nbsp;",
                      "level": 2
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790656478.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "text": "Express your emotion&nbsp;&nbsp;",
                      "level": 2
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790665958.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "text": "Express your emotion&nbsp;",
                      "level": 2
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790666616.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "text": "Match your emotion&nbsp;",
                      "level": 2
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790670639.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "text": "Match your emotion with&nbsp;&nbsp;",
                      "level": 2
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790671726.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "text": "Match your emotion with&nbsp;",
                      "level": 2
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790678119.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "text": "Match your emotion with our request",
                      "level": 2
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790689584.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "text": "Match your emotion with our request",
                      "level": 1
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790709879.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790739433.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790878479.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794463806.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794475141.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794582498.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794588638.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794630511.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794642025.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794693175.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794722410.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794756137.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794962246.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794969688.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795031367.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795117222.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795356167.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795404188.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682833802988.01
          }
        ]
      ],
      "hash": "adb2eeeba267f23bbcce4832b9736a573c8ccf34bff4dc66689155ed910da6f6"
    },
    "_meta": {
      "lwt": 1682833803004.01
    },
    "_deleted": false,
    "_attachments": {},
    "_rev": "32-exrcyzpgzn"
  },
  {
    "id": "Lt40zPCzGm",
    "type": "code",
    "data": {
      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n     .with('happy', () => '<i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>')\n     .otherwise(_ => `<i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>`)\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
      "language": "javascript",
      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
    },
    "index": 2,
    "createdBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
    "topic": "e8e141dd-68a7-4c29-af2c-11559f457520",
    "crdts": {
      "operations": [
        [
          {
            "creator": "pkhexmkwbs",
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "id": "Lt40zPCzGm",
                    "type": "code",
                    "data": {
                      "code": "",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "createdBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "topic": "e8e141dd-68a7-4c29-af2c-11559f457520"
                  }
                }
              }
            ],
            "time": 1682758539933.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758540729.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759073201.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": "Please <h1>Be angry</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759364946.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": "Please <h1>Be neutral</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759452594.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759586599.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682784467933.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786075113.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": "Please <h1>Be angry</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786261497.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786268714.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": "Please <h1>Be happy</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786269676.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786273731.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": "Please <h1>Be angry</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786274611.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786275785.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": "Please <h1>Be happy</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786276839.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786277923.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": "Please <h1>Be angry</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786278868.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786279867.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": "Please <h1>Be happy</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786280929.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786281914.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": "Please <h1>Be angry</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786282985.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786354222.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786364852.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786414080.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786420227.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682788979739.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789314963.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789325499.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy</h1> You're angry."
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789326147.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry</h1> You're sad."
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789352747.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"emotion)\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry</h1> You're sad."
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789478746.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"\"emotion)\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry</h1> You're sad."
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789479355.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<>\"emotion)\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry</h1> You're sad."
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789480651.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"emotion)\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry</h1> You're sad."
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789481299.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+)\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry</h1> You're sad."
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789483537.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+<>)\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry</h1> You're sad."
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789484579.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+</>)\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry</h1> You're sad."
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789485112.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+>)\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry</h1> You're sad."
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789485947.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"/h\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry</h1> You're sad."
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789487843.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry</h1> You're sad."
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789488443.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"<h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry</h1> You're sad."
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789489875.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry</h1> You're sad."
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789490747.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789491451.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789497224.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry You're happy.</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789498539.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i></h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789604909.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>. Now, you're happy.</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789609195.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>. Now, you're sad.</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789611891.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>. Now, you're happy.</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789614154.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-light fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i></h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789615298.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-light fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry.</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789615971.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry.</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789655823.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789826339.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-sharp fa-solid fa-brake-warning fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789829635.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789843864.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i></h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789849727.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789867485.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-sharp fa-solid fa-brake-warning fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789868794.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>.</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789873117.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>. Now, you're happy <i class=\"fa-sharp fa-solid fa-brake-warning fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789873979.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>. Now, you're sad <i class=\"fa-sharp fa-solid fa-brake-warning fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789875025.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>. Now, you're happy <i class=\"fa-sharp fa-solid fa-brake-warning fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789877240.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789923291.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789966520.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790169228.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790171356.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790172291.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790175354.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790176378.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>. Now, you're happy <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790177367.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790191779.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790280527.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790315855.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790356843.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790418087.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790421173.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion)\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790486724.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => emotion)\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790489019.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790609568.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion)\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790626712.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h1>\"+emotion+\"</h1>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790627200.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h2>\"+emotion+\"</h2>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790713515.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h2>\"+emotion+\"</h2/>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790718660.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n filter(x => !!x),\n  rewrite(emotion => \"<h2>\"+emotion+\"</h2>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790719585.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \"<h2>\"+emotion+\"</h2>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790724117.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790739434.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790878480.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \"<h2>\"+emotion+\"</h2>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791079465.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \"<h2>\"+emotion+\"</h2>\")\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791080229.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791085896.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => smart)\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791088131.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => match)\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791092299.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => match())\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791093496.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => match(emo))\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791096135.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => match(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791096937.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n    match(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791098158.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791099138.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion).\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791102108.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion),wi\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791104270.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion).with()\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791106132.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n     .with()\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791107843.03
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with()\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791108428.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with('')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791109702.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with('angry')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791111681.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with('angry', () => )\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791113851.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with('angry', () => '')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791115089.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with('angry', () => ''),\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791115875.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with('angry', () => ''),\n          .with('angry', () => ''),\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791117849.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with('angry', () => ''),\n    .with('angry', () => ''),\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791119120.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with('angry', () => ''),\n    .with('happy', () => ''),\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791122748.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with('angry', () => '')\n    .with('happy', () => ''),\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791126113.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with('angry', () => '')\n    .with('happy', () => '')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791130138.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with('angry', () => '')\n    .with('happy', () => '')\n          .with('happy', () => '')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791131075.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with('angry', () => '')\n    .with('happy', () => '')\n    .with('happy', () => '')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791132507.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with('angry'], () => '')\n    .with('happy', () => '')\n    .with('happy', () => '')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791138118.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with(['angry'], () => '')\n    .with('happy', () => '')\n    .with('happy', () => '')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791139737.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with(['angry',null], () => '')\n    .with('happy', () => '')\n    .with('happy', () => '')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791141884.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with(['angry',null], () => '')\n    .with('happy'], () => '')\n    .with('happy', () => '')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791144485.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with(['angry',null], () => '')\n    .with(['happy'], () => '')\n    .with('happy', () => '')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791146153.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with(['angry',null], () => '')\n    .with(['happy',], () => '')\n    .with('happy', () => '')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791147374.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with(['angry',null], () => '')\n    .with(['happy',null], () => '')\n    .with('happy', () => '')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791148381.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with(['angry',null], () => '')\n    .with(['happy',null], () => '')\n    .with('happy, () => '')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791152579.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with(['angry',null], () => '')\n    .with(['happy',null], () => '')\n    .with(['happy',null], () => '')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791153780.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = ''\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with(['angry',null], () => '')\n    .with(['happy',null], () => '')\n    .with(['sad',null], () => '')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791159362.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = []\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with(['angry',null], () => '')\n    .with(['happy',null], () => '')\n    .with(['sad',null], () => '')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791162221.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = [null,null]\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  filter(x => !!x),\n  rewrite(emotion => \n     match(emotion)\n    .with(['angry',null], () => '')\n    .with(['happy',null], () => '')\n    .with(['sad',null], () => '')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791165337.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = [null,null]\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  rewrite(emotion => \n     match(emotion)\n    .with(['angry',null], () => '')\n    .with(['happy',null], () => '')\n    .with(['sad',null], () => '')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791173131.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = [null,null]\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n    .with(['angry',null], () => '')\n    .with(['happy',null], () => '')\n    .with(['sad',null], () => '')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791202740.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = [null,null]\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n    .with(['angry',null], () => 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.')\n    .with(['happy',null], () => '')\n    .with(['sad',null], () => '')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791206897.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = [null,null]\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n    .with(['angry',null], () => 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.')\n    .with(['angry',null], () => 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.')\n    .with(['happy',null], () => '')\n    .with(['sad',null], () => '')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791212594.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = [null,null]\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n    .with(['angry',null], () => 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.')\n    \n    .with(['happy',null], () => '')\n    .with(['sad',null], () => '')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791213845.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = [null,null]\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n    .with(['angry',null], () => 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.')\n    .with(['happy',null], () => '')\n    .with(['sad',null], () => '')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791215646.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = [null,null]\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n    .with(['angry',null], () => 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.')\n    .with(['happy',null], () => 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.')\n    .with(['sad',null], () => '')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791219835.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = [null,null]\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n    .with(['angry',null], () => 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.')\n    .with(['happy',null], () => 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.')\n    .with(['sad',null], () => 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791224711.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = [null,null]\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n     .with(['angry',null], () => 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.')\n    .with(['happy',null], () => 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.')\n    .with(['sad',null], () => 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791230077.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = [null,null]\nawait environment.wait()\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n     .with(['angry',null], () => 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.')\n     .with(['happy',null], () => 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.')\n     .with(['sad',null], () => 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791231248.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n     .with(['angry',null], () => 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.')\n     .with(['happy',null], () => 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.')\n     .with(['sad',null], () => 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791247103.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n     .with(['angry',null], () => 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.')\n     .with(['happy',null], () => 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.')\n     .with(['sad',null], () => 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.')\n      .with(['sad',null], () => 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791267849.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n     .with(['angry',null], () => 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.')\n     .with(['happy',null], () => 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.')\n     .with(['sad',null], () => 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.')\n     .with(['sad',null], () => 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791269422.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n     .with(['angry',null], () => 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.')\n     .with(['happy',null], () => 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.')\n     .with(['sad',null], () => 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.')\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791272716.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "environment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n     .with(['angry',null], () => 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.')\n     .with(['happy',null], () => 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.')\n     .with(['sad',null], () => 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.')\n  )\n)`Now, you're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791310895.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n     .with(['angry',null], () => 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.')\n     .with(['happy',null], () => 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.')\n     .with(['sad',null], () => 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.')\n  )\n)`Now, you're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794360774.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n     .with(['angry',null], () => 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.')\n     .with(['happy',null], () => 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.')\n     .with(['sad',null], () => 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.')\n  )\n)`Now, you're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794361621.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n     .with(['angry',null], () => 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.')\n     .with(['happy',null], () => 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.')\n     .with(['sad',null], () => 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.')\n  )\n)`Now, you're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794362155.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n     .with(['angry',null], () => 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.')\n     .with(['happy',null], () => 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.')\n     .with(['sad',null], () => 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.')\n  )\n)`Now, you're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794370300.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n     .with(['angry',null], () => 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.')\n     .with(['happy',null], () => 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.')\n     .with(['sad',null], () => 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.')\n  )\n)`Now, you're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794370834.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n     .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n     .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n     .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n     .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n     .exhaustive()\n  )\n)`Now, you're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794383810.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n    .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n     .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n     .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n     .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n     .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n     .exhaustive()\n  )\n)`Now, you're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794386219.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n     .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n     .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n     .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n     .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n     .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n     .exhaustive()\n  )\n)`Now, you're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794388010.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n     .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n     .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n     .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n     .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n     .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n     .exhaustive()\n  )\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>. Now, you're angry <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.</h1>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794389710.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n     .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n     .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n     .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n     .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n     .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n     .exhaustive()\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794391204.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  display,\n  map(emotion => \n     match(emotion)\n     .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n     .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n     .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n     .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n     .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n     .exhaustive()\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794413747.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  display,\n  map(emotion => \n     match(emotion)\n     .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n     .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n     .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n     .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n     .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n     .exhaustive()\n  )\n)",
                      "language": "javascript",
                      "output": "[\n null,\n null\n]\n"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794415303.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  display,\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  )\n)",
                      "language": "javascript",
                      "output": "[\n null,\n null\n]\n"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794426539.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  display,\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  )\n  \n)",
                      "language": "javascript",
                      "output": "[\n null,\n null\n]\n"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794427736.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  display,\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  )\n)",
                      "language": "javascript",
                      "output": "[\n null,\n null\n]\n"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794428852.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  display,\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  r\n)",
                      "language": "javascript",
                      "output": "[\n null,\n null\n]\n"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794430066.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  display,\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "[\n null,\n null\n]\n"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794432047.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794434253.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794435162.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794463807.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794475147.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794480423.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794481312.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['angry'])\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794489283.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match([''])\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794490457.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy'])\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794491835.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',])\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794492747.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794493795.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794494280.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794495179.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794502324.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794503450.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794505552.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794506474.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block;\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794512600.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block;display: contents;\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794516513.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block;display: flex;\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794517582.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1>Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block;\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794518999.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 style=\"\n    display: block;\n\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block;\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794524601.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 style=\"\n    display: block;\n    width: 100;\n\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block;\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794531427.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h1>${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 style=\"\n    display: block;\n    width: 100%;\n\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block;\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794531915.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h1 class=\"w100\">${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1>${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 style=\"\n    display: block;\n    width: 100%;\n\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block;\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794540045.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h1 class=\"w100\">${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1 class=\"\">${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 style=\"\n    display: block;\n    width: 100%;\n\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block;\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794543726.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h1 class=\"w100\">${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1 class=\"w100\">${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 style=\"\n    display: block;\n    width: 100%;\n\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block;\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794546705.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h1 class=\"w100\">${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1 class=\"w100\">${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1 class>${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 style=\"\n    display: block;\n    width: 100%;\n\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block;\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794548870.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h1 class=\"w100\">${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1 class=\"w100\">${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1 class=\"\">${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 style=\"\n    display: block;\n    width: 100%;\n\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block;\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794549831.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h1 class=\"w100\">${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1 class=\"w100\">${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1>${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 style=\"\n    display: block;\n    width: 100%;\n\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block;\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794551186.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h1 class=\"w100\">${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1 class=\"w100\">${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 style=\"\n    display: block;\n    width: 100%;\n\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block;\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794555340.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h1 class=\"w100\">${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1 class=\"w100\">${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794566660.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h1 class=\"w100\">${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1 class=\"w100\">${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 class=\"w100\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794568253.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794582500.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794588647.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h class=\"w100\">${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h1 class=\"w100\">${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 class=\"w100\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794590889.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h1>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h1>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 class=\"w100\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794593442.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h1 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 class=\"w100\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794595752.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h1>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 class=\"w100\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794597473.03
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h1>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 class=\"w100\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794600009.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h1 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h1>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 class=\"w100\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794600694.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h1><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 class=\"w100\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794604820.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h3><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 class=\"w100\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794607197.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(['happy',null])\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 class=\"w100\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794607945.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 class=\"w100\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794612433.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794630512.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794642026.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 class=\"w100\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794656114.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 class=\"w100\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794657196.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 class=\"w100\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794667314.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 class=\"w100\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794669866.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n\n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 class=\"w100\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794670650.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 class=\"w100\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794671545.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\n\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 class=\"w100\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794672477.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 class=\"w100\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794675127.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 class=\"w100\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794680722.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h1 class=\"w100\">Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.</h1><img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794681548.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794682888.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, You're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794683975.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794693176.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794722414.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794756139.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794962249.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794969689.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795022594.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795024615.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795025628.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795031368.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795117223.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion}.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795242667.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795246566.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} .`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795247684.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${}.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795249467.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${userEmotion}.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795250798.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${match()}.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795254677.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${match(emt)}.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795256122.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${match(userEmotion)}.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795257260.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n    match(userEmotion)}.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795260322.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n    match(userEmotion)\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795261523.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795262621.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion).\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795263191.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n    .with()\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795267584.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry')\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795269712.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => {})\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795273217.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '')\n    .\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795278440.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '')\n    .otherw\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795280016.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '')\n     .otherwise\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795281090.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '')\n     .otherwise()\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795282072.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '')\n     .otherwise('')\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795282602.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795291185.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} .`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795294564.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${match(userEmotion)}.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795295436.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '')\n     .otherwise('')\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795296455.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '')\n     .otherwise(())\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795298353.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '')\n     .otherwise(_ => <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795300813.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '')\n     .otherwise(_ => ''\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795301524.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '')\n     .otherwise(_ => `<i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>`\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795302628.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '')\n     .otherwise(_ => `<i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>`''\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795303353.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '')\n     .otherwise(_ => `<i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>`)\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795304068.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n     .otherwise(_ => `<i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>`)\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795313578.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n    .with('angry', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n     .otherwise(_ => `<i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>`)\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795316798.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n    .with('angry', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n      .otherwise(_ => `<i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>`)\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795318546.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n    .with('angry', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n     .otherwise(_ => `<i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>`)\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795319570.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n     .with('angry', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n     .otherwise(_ => `<i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>`)\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795320368.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n     .with('ha', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n     .otherwise(_ => `<i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>`)\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795334224.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n     .with('happy', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n     .otherwise(_ => `<i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>`)\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795335104.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n     .with('happy', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n     .otherwise(_ => ` <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>`)\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795347435.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n     .with('happy', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n     .otherwise(_ => ` <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>`)\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795348654.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n     .with('happy', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n     .otherwise(_ => ` <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>`)\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795349767.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795356168.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n     .with('happy', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n     .otherwise(_ => ``)\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795385517.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n     .with('happy', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n     .otherwise(_ => `<i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>`)\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795386180.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "const ANGRY = 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.'\nconst IMG_ANGRY = `<img style=\"margin:auto;display:block\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/Striver1_A_high_res_photo_of_a_corporate_guy_wearing_Tax_man_su_7e414aad-aa4a-48b3-8923-2f89f0a72035.png\">`\nconst HAPPY = 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.'\nconst IMG_HAPPY = `<img style=\"margin:auto\" src=\"https://raw.githubusercontent.com/sanchezcarlosjr/computer-vision-and-graphics/main/assets/images/happy-with-friends-and-family-v0-ornke73kce8a1.webp\">`\nconst parseWarning = (userEmotion) => \n  `Now, you're ${userEmotion} ${\n     match(userEmotion)\n     .with('angry', () => '<i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>')\n     .with('happy', () => '<i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>')\n     .otherwise(_ => `<i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>`)\n  }.`\n\nenvironment.emotion = [null,null]\nawait environment.wait()\nenvironment.emotion$.pipe(\n  map(emotion => \n     match(emotion)\n      .with(['angry',null], () => `<h2 class=\"w100\">${ANGRY}</h2>${IMG_ANGRY}`)\n      .with(['happy',null], () => `<h2 class=\"w100\">${HAPPY}</h2>${IMG_HAPPY}`)\n      .with(['angry', P.string], ([_,userEmotion]) => `<h2 class=\"w100\">${ANGRY} ${parseWarning(userEmotion)}</h2>${IMG_ANGRY}`)\n      .with(['happy', P.string], ([_,userEmotion]) => `<h2 class=\"100\">${HAPPY} ${parseWarning(userEmotion)}</h2>${IMG_HAPPY}`)\n      .with(P._, () => '<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>')\n      .exhaustive()\n  ),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<h2><i class=\"fa-solid fa-regular fa-spinner fa-spin\"></i></h2>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795397398.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795404203.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682833802989.01
          }
        ]
      ],
      "hash": "1ad2335b79b94f9898d599e1b05dd07c978a2d13c2bc08d88733df3e56a39cdc"
    },
    "_meta": {
      "lwt": 1682833803004.02
    },
    "_deleted": false,
    "_attachments": {},
    "_rev": "279-exrcyzpgzn"
  },
  {
    "id": "dFSGWfil75",
    "type": "code",
    "data": {
      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = [emotion, null]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = [emotion,null]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion, userEmotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
      "language": "javascript",
      "output": ""
    },
    "index": 3,
    "createdBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
    "topic": "e8e141dd-68a7-4c29-af2c-11559f457520",
    "crdts": {
      "operations": [
        [
          {
            "creator": "pkhexmkwbs",
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "id": "dFSGWfil75",
                    "type": "code",
                    "data": {
                      "code": "",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "createdBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "topic": "e8e141dd-68a7-4c29-af2c-11559f457520"
                  }
                }
              }
            ],
            "time": 1682751227780.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "captureStream()",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682751235075.03
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "captureStream(),",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682751235656.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "captureStream().pipe(\n  \n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682751237552.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "captureStream().pipe(\n  imshow()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682751239327.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "captureStream().pipe(\n  imshow()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682751240303.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "captureStream().pipe(\n  imshow()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682751252774.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "captureStream().pipe(\n  imshow()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682751253692.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "captureStream().pipe(\n  imshow()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682751337467.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "captureStream().pipe(\n  imshow()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682751338894.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682751412673.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682751433811.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "captureStream().pipe(\n  imshow()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682751579666.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "captureStream().pipe(\n  imshow()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682751580681.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682751589062.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752294761.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752399725.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst g\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752403067.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = \n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752404413.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['']\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752405232.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['an']\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752407433.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['angry', 'sad', ]\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752410531.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['angry', 'sad', '']\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752411121.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['angry', 'sad', 'x']\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752412906.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['angry', 'sad', '']\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752413664.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752416785.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752418872.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752427323.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['angry', 'sad', 'happy']\nrender()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752429688.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['angry', 'sad', 'happy']\nrender().subscribe()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682752431993.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nenvironment.emotion = '1'\nenvironment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753011576.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nenvironment.emotion = '1'\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753013584.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = []\n\nenvironment.emotion = '1'\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753016720.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['angry', '']\n\nenvironment.emotion = '1'\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753020648.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = '1'\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753024304.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = ser\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753026112.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[0]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753027200.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = {\n  \n}\n\nenvironment.emotion = serie[0]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753048048.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[0]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753049112.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclas\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[0]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753052615.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass name {\n  constructor(params) {\n    \n  }\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[0]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753053445.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass X {\n  constructor(params) {\n    \n  }\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[0]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753054928.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass X {\n  constructor(params) {\n  }\n  \n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[0]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753057184.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass X {\n  constructor(params) {\n  }\n  next( )\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[0]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753059136.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass X {\n  constructor(params) {\n  }\n  next()\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[0]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753059640.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass X {\n  constructor(params) {\n  }\n  next() {\n    \n  }\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[0]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753060576.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass X {\n  constructor(serie) {\n  }\n  next() {\n    \n  }\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[0]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753065792.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass X {\n  constructor(serie) {\n    this.serie = serie\n  }\n  next() {\n    \n  }\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[0]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753068536.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass X {\n  constructor(serie) {\n    this.serie = serie\n  }\n  next() {\n    this.\n  }\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[0]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753074568.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass X {\n  constructor(serie) {\n    this.serie = serie\n  }\n  next() {\n    this. \n  }\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[0]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753075712.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass X {\n  constructor(serie) {\n    this.serie = serie\n  }\n  next() {\n    this.\n  }\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[0]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753076176.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass X {\n  constructor(serie) {\n    this.serie = serie\n  }\n  next() {\n    this.ra\n  }\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[0]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753077200.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[0]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753083503.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nlet i = 0\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[0]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753087968.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[0]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753093072.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['angry', 'sad', 'happy']\n['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[0]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753094816.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[0]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753139511.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nrandint(0,5)\n\nenvironment.emotion = serie[0]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753141672.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[0]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753144752.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[randint(0,5)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753146200.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753149192.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['angry', 'sad', 'happy']\n\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753151760.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nconst serie = ['angry', 'sad', 'happy']\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753161635.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass\n\nconst serie = ['angry', 'sad', 'happy']\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753270720.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass name {\n  constructor(params) {\n    \n  }\n}\n\nconst serie = ['angry', 'sad', 'happy']\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753271272.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass E {\n  constructor(params) {\n    \n  }\n}\n\nconst serie = ['angry', 'sad', 'happy']\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753274076.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass  {\n  constructor(params) {\n    \n  }\n}\n\nconst serie = ['angry', 'sad', 'happy']\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753276424.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(params) {\n    \n  }\n}\n\nconst serie = ['angry', 'sad', 'happy']\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753278256.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    \n  }\n}\n\nconst serie = ['angry', 'sad', 'happy']\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753281711.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  next()\n}\n\nconst serie = ['angry', 'sad', 'happy']\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753288168.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  next() \n}\n\nconst serie = ['angry', 'sad', 'happy']\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753288651.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  next() {}\n}\n\nconst serie = ['angry', 'sad', 'happy']\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753289153.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  next() {\n    \n  }\n}\n\nconst serie = ['angry', 'sad', 'happy']\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753289696.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  next() {\n    return \n  }\n}\n\nconst serie = ['angry', 'sad', 'happy']\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753291568.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  next() {\n    return serie[randint(0,serie.length)]\n  }\n}\n\nconst serie = ['angry', 'sad', 'happy']\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753296455.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    return serie[randint(0,serie.length)]\n  }\n}\n\nconst serie = ['angry', 'sad', 'happy']\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753312096.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    serie[randint(0,serie.length)]\n  }\n}\n\nconst serie = ['angry', 'sad', 'happy']\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753314545.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    serie[randint(0,serie.length)]\n  }\n}\n\nconst game = new Game([])\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753324533.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    serie[randint(0,serie.length)]\n  }\n}\n\nconst game = new Game([''])\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753325075.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    serie[randint(0,serie.length)]\n  }\n}\n\nconst game = new Game(['angry', ''])\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753327108.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    serie[randint(0,serie.length)]\n  }\n}\n\nconst game = new Game(['angry', 'game'])\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753328088.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    serie[randint(0,serie.length)]\n  }\n}\n\nconst game = new Game(['angry', ''])\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753329152.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    serie[randint(0,serie.length)]\n  }\n}\n\nconst game = new Game(['angry', 'happy'])\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753330932.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    serie[randint(0,serie.length)]\n  }\n}\n\nconst game = new Game(['angry', 'happy', ])\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753333521.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    serie[randint(0,serie.length)]\n  }\n}\n\nconst game = new Game(['angry', 'happy', 'sad'])\nenvironment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753334424.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    serie[randint(0,serie.length)]\n  }\n}\n\nconst game = new Game(['angry', 'happy', 'sad'])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753340912.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    serie[randint(0,serie.length)]\n    environment.emotion = serie[randint(0,serie.length)]\nawait environment.wait()\n  }\n}\n\nconst game = new Game(['angry', 'happy', 'sad'])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753342033.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    serie[randint(0,serie.length)]\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game(['angry', 'happy', 'sad'])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753344530.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    \n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game(['angry', 'happy', 'sad'])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753345276.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game(['angry', 'happy', 'sad'])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753346928.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', 'happy', 'sad'])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753411736.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry'], 'happy', 'sad'])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753412424.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', ''], 'happy', 'sad'])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753413400.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', 'Be '], 'happy', 'sad'])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753414977.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', 'Be happy'], 'happy', 'sad'])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753416072.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', 'Be '], 'happy', 'sad'])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753418377.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', 'Be Angry'], 'happy', 'sad'])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753420635.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', 'Be Angry'], ['happy', 'sad'])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753422120.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', 'Be Angry'], ['happy'], 'sad'])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753423345.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', 'Be Angry'], ['happy', 'Be '], 'sad'])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753426704.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', 'Be Angry'], ['happy', 'Be happy'], ['sad'])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753429456.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', 'Be Angry'], ['happy', 'Be happy'], ['sad']])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753430246.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', 'Be Angry'], ['happy', 'Be happy'], ['sad', '']])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753431281.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', 'Be Angry'], ['happy', 'Be happy'], ['sad', 'Be']])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753432030.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', 'Be Angry'], ['happy', 'Be happy'], ['sad', 'Be ']])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753432688.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', 'Be Angry'], ['happy', 'Be happy'], ['sad', 'Be h']])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753433984.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', 'Be Angry'], ['happy', 'Be happy'], ['sad', 'Be ']])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753435245.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', 'Be Angry'], ['happy', 'Be happy'], ['sad', 'Be sad']])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753436064.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry'], ['happy', 'Be happy'], ['sad', 'Be sad']])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753457136.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry</h1>'], ['happy', 'Be happy'], ['sad', 'Be sad']])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753460680.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry</h1>'], ['happy', 'h1>Be Angry</h1>'], ['sad', 'Be sad']])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753466374.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry</h1>'], ['happy', '<h1>Be Angry</h1>'], ['sad', 'Be sad']])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753468429.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry</h1>'], ['happy', '<h1>Be Happy</h1>'], ['sad', 'Be sad']])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753472209.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry</h1>'], ['happy', '<h1>Be Happy</h1>'], ['sad', 'Be sa']])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753474528.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry</h1>'], ['happy', '<h1>Be Happy</h1>'], ['sad', '<>']])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753476072.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry</h1>'], ['happy', '<h1>Be Happy</h1>'], ['sad', '<h2>']])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753477168.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry</h1>'], ['happy', '<h1>Be Happy</h1>'], ['sad', '<h1>']])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753478024.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry</h1>'], ['happy', '<h1>Be Happy</h1>'], ['sad', '<h1></h1']])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753479246.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry</h1>'], ['happy', '<h1>Be Happy</h1>'], ['sad', '<h1></h1>']])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753479846.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry</h1>'], ['happy', '<h1>Be Happy</h1>'], ['sad', '<h1>Be sad</h1>']])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753482441.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)][]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry</h1>'], ['happy', '<h1>Be Happy</h1>'], ['sad', '<h1>Be sad</h1>']])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753492480.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)][0]\n    await environment.wait()\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry</h1>'], ['happy', '<h1>Be Happy</h1>'], ['sad', '<h1>Be sad</h1>']])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753493848.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)][0]\n    await environment.wait()\n    return environment.emotion\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry</h1>'], ['happy', '<h1>Be Happy</h1>'], ['sad', '<h1>Be sad</h1>']])\n\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753499505.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)][0]\n    await environment.wait()\n    return environment.emotion\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry</h1>'], ['happy', '<h1>Be Happy</h1>'], ['sad', '<h1>Be sad</h1>']])\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}.`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753549853.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)][0]\n    await environment.wait()\n    return environment.emotion\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry</h1>'], ['happy', '<h1>Be Happy</h1>'], ['sad', '<h1>Be sad</h1>']])\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return `You're ${max[0]}`\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753556896.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)][0]\n    await environment.wait()\n    return environment.emotion\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry</h1>'], ['happy', '<h1>Be Happy</h1>'], ['sad', '<h1>Be sad</h1>']])\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753560185.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  current\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)][0]\n    await environment.wait()\n    return environment.emotion\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry</h1>'], ['happy', '<h1>Be Happy</h1>'], ['sad', '<h1>Be sad</h1>']])\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753594152.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  get current\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)][0]\n    await environment.wait()\n    return environment.emotion\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry</h1>'], ['happy', '<h1>Be Happy</h1>'], ['sad', '<h1>Be sad</h1>']])\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753597219.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  get current {}\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)][0]\n    await environment.wait()\n    return environment.emotion\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry</h1>'], ['happy', '<h1>Be Happy</h1>'], ['sad', '<h1>Be sad</h1>']])\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753598841.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  get current() {\n    return \n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)][0]\n    await environment.wait()\n    return environment.emotion\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry</h1>'], ['happy', '<h1>Be Happy</h1>'], ['sad', '<h1>Be sad</h1>']])\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753601450.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  get current() {\n    return\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)][0]\n    await environment.wait()\n    return environment.emotion\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry</h1>'], ['happy', '<h1>Be Happy</h1>'], ['sad', '<h1>Be sad</h1>']])\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753601954.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nclass Game {\n  constructor(serie) {\n    this.serie = serie\n  }\n  get current() {\n    return environment.emotion\n  }\n  async next() {\n    environment.emotion = serie[randint(0,serie.length)][0]\n    await environment.wait()\n    return environment.emotion\n  }\n}\n\nconst game = new Game([['angry', '<h1>Be Angry</h1>'], ['happy', '<h1>Be Happy</h1>'], ['sad', '<h1>Be sad</h1>']])\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682753609801.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => Promise.resolve(false))\n  }\n  return next\n}\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758497008.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => Promise.resolve(false))\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758505225.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => Promise.resolve(false))\n  }\n  return next\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758507928.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => Promise.resolve(false))\n  }\n  return next\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  \n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758515120.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => Promise.resolve(false))\n  }\n  return next\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap( next)\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758518824.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => Promise.resolve(false))\n  }\n  return next\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap( next())\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758519944.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => Promise.resolve(false))\n  }\n  return next\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(x next())\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758521272.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => Promise.resolve(false))\n  }\n  return next\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(x => next())\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758522352.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => Promise.resolve(false))\n  }\n  return next\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next())\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758524888.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => Promise.resolve(false))\n  }\n  return next\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion))\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758527704.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => Promise.resolve(false))\n  }\n  return next\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758528464.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => Promise.resolve(false))\n  }\n  return next\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 1,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758532094.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n             environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758592600.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758594000.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  \n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758618008.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let \n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758620168.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758626520.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = +dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758667192.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = ''+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758668336.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758671480.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please'+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758673480.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758674840.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next[]\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758684192.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next]\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758685897.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758687584.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            \n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758693664.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            \n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758696536.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758697904.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst next = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758698728.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758702496.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total, next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758703976.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758704736.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(x => )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758718272.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758722224.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total == 3)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758726520.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758727473.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  \n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758728336.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  hello\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758729880.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  \n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758731016.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758735840.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">TypeError: useGame is not a function or its return value is not iterable</pre>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758738312.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758744080.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">TypeError: useGame is not a function or its return value is not iterable</pre>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758744816.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nfunction useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">TypeError: useGame is not a function or its return value is not iterable</pre>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758764712.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nfunction useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758766656.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nfunction useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  filter(x => !!x),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "Uncaught TypeError: Cannot read properties of undefined (reading 'emotion')\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758768744.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nfunction useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion),\n  \n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "Uncaught TypeError: Cannot read properties of undefined (reading 'emotion')\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758779152.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nfunction useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => !!x),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "Uncaught TypeError: Cannot read properties of undefined (reading 'emotion')\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758781694.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nfunction useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "Uncaught TypeError: Cannot read properties of undefined (reading 'emotion')\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758784280.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nfunction useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face ),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "Uncaught TypeError: Cannot read properties of undefined (reading 'emotion')\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758785096.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nfunction useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face.length  ),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "Uncaught TypeError: Cannot read properties of undefined (reading 'emotion')\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758787888.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nfunction useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face.length === ),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "Uncaught TypeError: Cannot read properties of undefined (reading 'emotion')\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758789552.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nfunction useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face.length == ),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "Uncaught TypeError: Cannot read properties of undefined (reading 'emotion')\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758792456.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nfunction useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face ),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "Uncaught TypeError: Cannot read properties of undefined (reading 'emotion')\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758793328.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nfunction useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "Uncaught TypeError: Cannot read properties of undefined (reading 'emotion')\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758794320.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nfunction useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face ),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "Uncaught TypeError: Cannot read properties of undefined (reading 'emotion')\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758797192.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nfunction useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && ),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "Uncaught TypeError: Cannot read properties of undefined (reading 'emotion')\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758798256.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nfunction useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "Uncaught TypeError: Cannot read properties of undefined (reading 'emotion')\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758799096.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nfunction useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "Uncaught TypeError: Cannot read properties of undefined (reading 'emotion')\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758800360.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nfunction useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "Uncaught TypeError: Cannot read properties of undefined (reading 'emotion')\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758802704.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nfunction useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758803474.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(P.when(userEmotion =>  userEmotion === emotion || emotion === null), _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758852648.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758862593.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n     emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758867263.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n  let emotion = null\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758868120.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758871149.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758873494.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n            return environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758875832.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n    environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758879629.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758880802.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await seGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758883882.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758885216.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  \n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758940550.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758942880.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758946925.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758948124.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758949822.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758953496.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758956869.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758958108.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758959280.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"fear\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758960545.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"fear\"\n\"fear\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758961664.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758962739.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758963898.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758965069.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758966184.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758967528.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758968827.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758970867.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral', 'fear']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758976632.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758978775.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear'\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758981768.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear';\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758982912.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear':\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758984473.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be neutral</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758986696.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758990239.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758993600.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"fear\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758994848.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"fear\"\n\"fear\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758996076.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758997600.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758998777.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682758999995.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759001264.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n\"fear\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759003488.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759004349.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759073202.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  \n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759079625.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759082001.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759085352.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759086561.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759087481.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759088721.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759089888.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759094320.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759095406.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759096512.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759097641.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759098608.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759100376.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  \n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759105353.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  im\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759106096.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  imshow()\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759107208.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  imshow(),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759109648.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  imshow(),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759110937.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  imshow(),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759111830.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759142458.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759143642.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759146577.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759147657.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759149394.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy',]) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759173173.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759173738.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759230529.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759233714.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759234906.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759236713.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759283945.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759287322.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759289089.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy',]) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759314853.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759315440.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  imshow(),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759316414.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 3),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759318947.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759322281.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759335970.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759372425.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759375657.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759376916.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759377977.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759379072.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759380193.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759381238.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759382379.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759383474.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759384573.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759385847.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759386907.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759388107.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759389203.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759390345.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759391430.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759392610.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759393799.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759395105.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759396144.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759397241.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759398469.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759427209.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759430496.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759431824.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759432953.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759434248.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759435504.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759436736.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759437863.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759438960.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759440210.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759441640.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759442881.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759444067.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759445307.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759446463.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759447713.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759449113.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n \n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759464264.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n display\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759466472.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n display\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759467513.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n display\n)",
                      "language": "javascript",
                      "output": "[\n 1,\n [\n  [\n   \"sad\",\n   0.44\n  ],\n  [\n   \"neutral\",\n   0.27\n  ],\n  [\n   \"happy\",\n   0.1\n  ]\n ]\n]\n[\n 2,\n [\n  [\n   \"sad\",\n   0.88\n  ],\n  [\n   \"neutral\",\n   0.54\n  ],\n  [\n   \"happy\",\n   0.2\n  ]\n ]\n]\n[\n 3,\n [\n  [\n   \"sad\",\n   1.32\n  ],\n  [\n   \"neutral\",\n   0.81\n  ],\n  [\n   \"happy\",\n   0.30000000000000004\n  ]\n ]\n]\n[\n 4,\n [\n  [\n   \"sad\",\n   1.76\n  ],\n  [\n   \"neutral\",\n   1.08\n  ],\n  [\n   \"happy\",\n   0.4\n  ]\n ]\n]\n[\n 5,\n [\n  [\n   \"sad\",\n   2.2\n  ],\n  [\n   \"neutral\",\n   1.35\n  ],\n  [\n   \"happy\",\n   0.5\n  ]\n ]\n]\n[\n 6,\n [\n  [\n   \"sad\",\n   2.64\n  ],\n  [\n   \"neutral\",\n   1.62\n  ],\n  [\n   \"happy\",\n   0.6\n  ]\n ]\n]\n[\n 7,\n [\n  [\n   \"sad\",\n   3.08\n  ],\n  [\n   \"neutral\",\n   1.8900000000000001\n  ],\n  [\n   \"happy\",\n   0.7\n  ]\n ]\n]\n[\n 8,\n [\n  [\n   \"sad\",\n   3.52\n  ],\n  [\n   \"neutral\",\n   2.16\n  ],\n  [\n   \"happy\",\n   0.7999999999999999\n  ]\n ]\n]\n[\n 9,\n [\n  [\n   \"sad\",\n   3.96\n  ],\n  [\n   \"neutral\",\n   2.43\n  ],\n  [\n   \"happy\",\n   0.8999999999999999\n  ]\n ]\n]\n[\n 10,\n [\n  [\n   \"sad\",\n   4.4\n  ],\n  [\n   \"neutral\",\n   2.7\n  ],\n  [\n   \"happy\",\n   0.9999999999999999\n  ]\n ]\n]\n[\n 11,\n [\n  [\n   \"sad\",\n   4.840000000000001\n  ],\n  [\n   \"neutral\",\n   2.97\n  ],\n  [\n   \"happy\",\n   1.0999999999999999\n  ]\n ]\n]\n[\n 12,\n [\n  [\n   \"sad\",\n   5.280000000000001\n  ],\n  [\n   \"neutral\",\n   3.24\n  ],\n  [\n   \"happy\",\n   1.2\n  ]\n ]\n]\n[\n 13,\n [\n  [\n   \"sad\",\n   5.7200000000000015\n  ],\n  [\n   \"neutral\",\n   3.5100000000000002\n  ],\n  [\n   \"happy\",\n   1.3\n  ]\n ]\n]\n[\n 14,\n [\n  [\n   \"sad\",\n   6.160000000000002\n  ],\n  [\n   \"neutral\",\n   3.7800000000000002\n  ],\n  [\n   \"happy\",\n   1.4000000000000001\n  ]\n ]\n]\n[\n 15,\n [\n  [\n   \"sad\",\n   6.600000000000002\n  ],\n  [\n   \"neutral\",\n   4.050000000000001\n  ],\n  [\n   \"happy\",\n   1.5000000000000002\n  ]\n ]\n]\n[\n 16,\n [\n  [\n   \"sad\",\n   7.040000000000003\n  ],\n  [\n   \"neutral\",\n   4.32\n  ],\n  [\n   \"happy\",\n   1.6000000000000003\n  ]\n ]\n]\n[\n 17,\n [\n  [\n   \"sad\",\n   7.480000000000003\n  ],\n  [\n   \"neutral\",\n   4.59\n  ],\n  [\n   \"happy\",\n   1.7000000000000004\n  ]\n ]\n]\n[\n 18,\n [\n  [\n   \"sad\",\n   7.9200000000000035\n  ],\n  [\n   \"neutral\",\n   4.859999999999999\n  ],\n  [\n   \"happy\",\n   1.8000000000000005\n  ]\n ]\n]\n[\n 19,\n [\n  [\n   \"sad\",\n   8.360000000000003\n  ],\n  [\n   \"neutral\",\n   5.129999999999999\n  ],\n  [\n   \"happy\",\n   1.9000000000000006\n  ]\n ]\n]\n[\n 20,\n [\n  [\n   \"sad\",\n   8.800000000000002\n  ],\n  [\n   \"neutral\",\n   5.399999999999999\n  ],\n  [\n   \"happy\",\n   2.0000000000000004\n  ]\n ]\n]\n[\n 21,\n [\n  [\n   \"sad\",\n   9.050000000000002\n  ],\n  [\n   \"neutral\",\n   5.509999999999999\n  ],\n  [\n   \"happy\",\n   2.4800000000000004\n  ],\n  [\n   \"angry\",\n   0.11\n  ]\n ]\n]\n[\n 22,\n [\n  [\n   \"sad\",\n   9.300000000000002\n  ],\n  [\n   \"neutral\",\n   5.619999999999999\n  ],\n  [\n   \"happy\",\n   2.9600000000000004\n  ],\n  [\n   \"angry\",\n   0.22\n  ]\n ]\n]\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759471730.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n jsonTo\n)",
                      "language": "javascript",
                      "output": "[\n 1,\n [\n  [\n   \"sad\",\n   0.44\n  ],\n  [\n   \"neutral\",\n   0.27\n  ],\n  [\n   \"happy\",\n   0.1\n  ]\n ]\n]\n[\n 2,\n [\n  [\n   \"sad\",\n   0.88\n  ],\n  [\n   \"neutral\",\n   0.54\n  ],\n  [\n   \"happy\",\n   0.2\n  ]\n ]\n]\n[\n 3,\n [\n  [\n   \"sad\",\n   1.32\n  ],\n  [\n   \"neutral\",\n   0.81\n  ],\n  [\n   \"happy\",\n   0.30000000000000004\n  ]\n ]\n]\n[\n 4,\n [\n  [\n   \"sad\",\n   1.76\n  ],\n  [\n   \"neutral\",\n   1.08\n  ],\n  [\n   \"happy\",\n   0.4\n  ]\n ]\n]\n[\n 5,\n [\n  [\n   \"sad\",\n   2.2\n  ],\n  [\n   \"neutral\",\n   1.35\n  ],\n  [\n   \"happy\",\n   0.5\n  ]\n ]\n]\n[\n 6,\n [\n  [\n   \"sad\",\n   2.64\n  ],\n  [\n   \"neutral\",\n   1.62\n  ],\n  [\n   \"happy\",\n   0.6\n  ]\n ]\n]\n[\n 7,\n [\n  [\n   \"sad\",\n   3.08\n  ],\n  [\n   \"neutral\",\n   1.8900000000000001\n  ],\n  [\n   \"happy\",\n   0.7\n  ]\n ]\n]\n[\n 8,\n [\n  [\n   \"sad\",\n   3.52\n  ],\n  [\n   \"neutral\",\n   2.16\n  ],\n  [\n   \"happy\",\n   0.7999999999999999\n  ]\n ]\n]\n[\n 9,\n [\n  [\n   \"sad\",\n   3.96\n  ],\n  [\n   \"neutral\",\n   2.43\n  ],\n  [\n   \"happy\",\n   0.8999999999999999\n  ]\n ]\n]\n[\n 10,\n [\n  [\n   \"sad\",\n   4.4\n  ],\n  [\n   \"neutral\",\n   2.7\n  ],\n  [\n   \"happy\",\n   0.9999999999999999\n  ]\n ]\n]\n[\n 11,\n [\n  [\n   \"sad\",\n   4.840000000000001\n  ],\n  [\n   \"neutral\",\n   2.97\n  ],\n  [\n   \"happy\",\n   1.0999999999999999\n  ]\n ]\n]\n[\n 12,\n [\n  [\n   \"sad\",\n   5.280000000000001\n  ],\n  [\n   \"neutral\",\n   3.24\n  ],\n  [\n   \"happy\",\n   1.2\n  ]\n ]\n]\n[\n 13,\n [\n  [\n   \"sad\",\n   5.7200000000000015\n  ],\n  [\n   \"neutral\",\n   3.5100000000000002\n  ],\n  [\n   \"happy\",\n   1.3\n  ]\n ]\n]\n[\n 14,\n [\n  [\n   \"sad\",\n   6.160000000000002\n  ],\n  [\n   \"neutral\",\n   3.7800000000000002\n  ],\n  [\n   \"happy\",\n   1.4000000000000001\n  ]\n ]\n]\n[\n 15,\n [\n  [\n   \"sad\",\n   6.600000000000002\n  ],\n  [\n   \"neutral\",\n   4.050000000000001\n  ],\n  [\n   \"happy\",\n   1.5000000000000002\n  ]\n ]\n]\n[\n 16,\n [\n  [\n   \"sad\",\n   7.040000000000003\n  ],\n  [\n   \"neutral\",\n   4.32\n  ],\n  [\n   \"happy\",\n   1.6000000000000003\n  ]\n ]\n]\n[\n 17,\n [\n  [\n   \"sad\",\n   7.480000000000003\n  ],\n  [\n   \"neutral\",\n   4.59\n  ],\n  [\n   \"happy\",\n   1.7000000000000004\n  ]\n ]\n]\n[\n 18,\n [\n  [\n   \"sad\",\n   7.9200000000000035\n  ],\n  [\n   \"neutral\",\n   4.859999999999999\n  ],\n  [\n   \"happy\",\n   1.8000000000000005\n  ]\n ]\n]\n[\n 19,\n [\n  [\n   \"sad\",\n   8.360000000000003\n  ],\n  [\n   \"neutral\",\n   5.129999999999999\n  ],\n  [\n   \"happy\",\n   1.9000000000000006\n  ]\n ]\n]\n[\n 20,\n [\n  [\n   \"sad\",\n   8.800000000000002\n  ],\n  [\n   \"neutral\",\n   5.399999999999999\n  ],\n  [\n   \"happy\",\n   2.0000000000000004\n  ]\n ]\n]\n[\n 21,\n [\n  [\n   \"sad\",\n   9.050000000000002\n  ],\n  [\n   \"neutral\",\n   5.509999999999999\n  ],\n  [\n   \"happy\",\n   2.4800000000000004\n  ],\n  [\n   \"angry\",\n   0.11\n  ]\n ]\n]\n[\n 22,\n [\n  [\n   \"sad\",\n   9.300000000000002\n  ],\n  [\n   \"neutral\",\n   5.619999999999999\n  ],\n  [\n   \"happy\",\n   2.9600000000000004\n  ],\n  [\n   \"angry\",\n   0.22\n  ]\n ]\n]\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759480470.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "[\n 1,\n [\n  [\n   \"sad\",\n   0.44\n  ],\n  [\n   \"neutral\",\n   0.27\n  ],\n  [\n   \"happy\",\n   0.1\n  ]\n ]\n]\n[\n 2,\n [\n  [\n   \"sad\",\n   0.88\n  ],\n  [\n   \"neutral\",\n   0.54\n  ],\n  [\n   \"happy\",\n   0.2\n  ]\n ]\n]\n[\n 3,\n [\n  [\n   \"sad\",\n   1.32\n  ],\n  [\n   \"neutral\",\n   0.81\n  ],\n  [\n   \"happy\",\n   0.30000000000000004\n  ]\n ]\n]\n[\n 4,\n [\n  [\n   \"sad\",\n   1.76\n  ],\n  [\n   \"neutral\",\n   1.08\n  ],\n  [\n   \"happy\",\n   0.4\n  ]\n ]\n]\n[\n 5,\n [\n  [\n   \"sad\",\n   2.2\n  ],\n  [\n   \"neutral\",\n   1.35\n  ],\n  [\n   \"happy\",\n   0.5\n  ]\n ]\n]\n[\n 6,\n [\n  [\n   \"sad\",\n   2.64\n  ],\n  [\n   \"neutral\",\n   1.62\n  ],\n  [\n   \"happy\",\n   0.6\n  ]\n ]\n]\n[\n 7,\n [\n  [\n   \"sad\",\n   3.08\n  ],\n  [\n   \"neutral\",\n   1.8900000000000001\n  ],\n  [\n   \"happy\",\n   0.7\n  ]\n ]\n]\n[\n 8,\n [\n  [\n   \"sad\",\n   3.52\n  ],\n  [\n   \"neutral\",\n   2.16\n  ],\n  [\n   \"happy\",\n   0.7999999999999999\n  ]\n ]\n]\n[\n 9,\n [\n  [\n   \"sad\",\n   3.96\n  ],\n  [\n   \"neutral\",\n   2.43\n  ],\n  [\n   \"happy\",\n   0.8999999999999999\n  ]\n ]\n]\n[\n 10,\n [\n  [\n   \"sad\",\n   4.4\n  ],\n  [\n   \"neutral\",\n   2.7\n  ],\n  [\n   \"happy\",\n   0.9999999999999999\n  ]\n ]\n]\n[\n 11,\n [\n  [\n   \"sad\",\n   4.840000000000001\n  ],\n  [\n   \"neutral\",\n   2.97\n  ],\n  [\n   \"happy\",\n   1.0999999999999999\n  ]\n ]\n]\n[\n 12,\n [\n  [\n   \"sad\",\n   5.280000000000001\n  ],\n  [\n   \"neutral\",\n   3.24\n  ],\n  [\n   \"happy\",\n   1.2\n  ]\n ]\n]\n[\n 13,\n [\n  [\n   \"sad\",\n   5.7200000000000015\n  ],\n  [\n   \"neutral\",\n   3.5100000000000002\n  ],\n  [\n   \"happy\",\n   1.3\n  ]\n ]\n]\n[\n 14,\n [\n  [\n   \"sad\",\n   6.160000000000002\n  ],\n  [\n   \"neutral\",\n   3.7800000000000002\n  ],\n  [\n   \"happy\",\n   1.4000000000000001\n  ]\n ]\n]\n[\n 15,\n [\n  [\n   \"sad\",\n   6.600000000000002\n  ],\n  [\n   \"neutral\",\n   4.050000000000001\n  ],\n  [\n   \"happy\",\n   1.5000000000000002\n  ]\n ]\n]\n[\n 16,\n [\n  [\n   \"sad\",\n   7.040000000000003\n  ],\n  [\n   \"neutral\",\n   4.32\n  ],\n  [\n   \"happy\",\n   1.6000000000000003\n  ]\n ]\n]\n[\n 17,\n [\n  [\n   \"sad\",\n   7.480000000000003\n  ],\n  [\n   \"neutral\",\n   4.59\n  ],\n  [\n   \"happy\",\n   1.7000000000000004\n  ]\n ]\n]\n[\n 18,\n [\n  [\n   \"sad\",\n   7.9200000000000035\n  ],\n  [\n   \"neutral\",\n   4.859999999999999\n  ],\n  [\n   \"happy\",\n   1.8000000000000005\n  ]\n ]\n]\n[\n 19,\n [\n  [\n   \"sad\",\n   8.360000000000003\n  ],\n  [\n   \"neutral\",\n   5.129999999999999\n  ],\n  [\n   \"happy\",\n   1.9000000000000006\n  ]\n ]\n]\n[\n 20,\n [\n  [\n   \"sad\",\n   8.800000000000002\n  ],\n  [\n   \"neutral\",\n   5.399999999999999\n  ],\n  [\n   \"happy\",\n   2.0000000000000004\n  ]\n ]\n]\n[\n 21,\n [\n  [\n   \"sad\",\n   9.050000000000002\n  ],\n  [\n   \"neutral\",\n   5.509999999999999\n  ],\n  [\n   \"happy\",\n   2.4800000000000004\n  ],\n  [\n   \"angry\",\n   0.11\n  ]\n ]\n]\n[\n 22,\n [\n  [\n   \"sad\",\n   9.300000000000002\n  ],\n  [\n   \"neutral\",\n   5.619999999999999\n  ],\n  [\n   \"happy\",\n   2.9600000000000004\n  ],\n  [\n   \"angry\",\n   0.22\n  ]\n ]\n]\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759482183.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n\n)",
                      "language": "javascript",
                      "output": "[\n 1,\n [\n  [\n   \"sad\",\n   0.44\n  ],\n  [\n   \"neutral\",\n   0.27\n  ],\n  [\n   \"happy\",\n   0.1\n  ]\n ]\n]\n[\n 2,\n [\n  [\n   \"sad\",\n   0.88\n  ],\n  [\n   \"neutral\",\n   0.54\n  ],\n  [\n   \"happy\",\n   0.2\n  ]\n ]\n]\n[\n 3,\n [\n  [\n   \"sad\",\n   1.32\n  ],\n  [\n   \"neutral\",\n   0.81\n  ],\n  [\n   \"happy\",\n   0.30000000000000004\n  ]\n ]\n]\n[\n 4,\n [\n  [\n   \"sad\",\n   1.76\n  ],\n  [\n   \"neutral\",\n   1.08\n  ],\n  [\n   \"happy\",\n   0.4\n  ]\n ]\n]\n[\n 5,\n [\n  [\n   \"sad\",\n   2.2\n  ],\n  [\n   \"neutral\",\n   1.35\n  ],\n  [\n   \"happy\",\n   0.5\n  ]\n ]\n]\n[\n 6,\n [\n  [\n   \"sad\",\n   2.64\n  ],\n  [\n   \"neutral\",\n   1.62\n  ],\n  [\n   \"happy\",\n   0.6\n  ]\n ]\n]\n[\n 7,\n [\n  [\n   \"sad\",\n   3.08\n  ],\n  [\n   \"neutral\",\n   1.8900000000000001\n  ],\n  [\n   \"happy\",\n   0.7\n  ]\n ]\n]\n[\n 8,\n [\n  [\n   \"sad\",\n   3.52\n  ],\n  [\n   \"neutral\",\n   2.16\n  ],\n  [\n   \"happy\",\n   0.7999999999999999\n  ]\n ]\n]\n[\n 9,\n [\n  [\n   \"sad\",\n   3.96\n  ],\n  [\n   \"neutral\",\n   2.43\n  ],\n  [\n   \"happy\",\n   0.8999999999999999\n  ]\n ]\n]\n[\n 10,\n [\n  [\n   \"sad\",\n   4.4\n  ],\n  [\n   \"neutral\",\n   2.7\n  ],\n  [\n   \"happy\",\n   0.9999999999999999\n  ]\n ]\n]\n[\n 11,\n [\n  [\n   \"sad\",\n   4.840000000000001\n  ],\n  [\n   \"neutral\",\n   2.97\n  ],\n  [\n   \"happy\",\n   1.0999999999999999\n  ]\n ]\n]\n[\n 12,\n [\n  [\n   \"sad\",\n   5.280000000000001\n  ],\n  [\n   \"neutral\",\n   3.24\n  ],\n  [\n   \"happy\",\n   1.2\n  ]\n ]\n]\n[\n 13,\n [\n  [\n   \"sad\",\n   5.7200000000000015\n  ],\n  [\n   \"neutral\",\n   3.5100000000000002\n  ],\n  [\n   \"happy\",\n   1.3\n  ]\n ]\n]\n[\n 14,\n [\n  [\n   \"sad\",\n   6.160000000000002\n  ],\n  [\n   \"neutral\",\n   3.7800000000000002\n  ],\n  [\n   \"happy\",\n   1.4000000000000001\n  ]\n ]\n]\n[\n 15,\n [\n  [\n   \"sad\",\n   6.600000000000002\n  ],\n  [\n   \"neutral\",\n   4.050000000000001\n  ],\n  [\n   \"happy\",\n   1.5000000000000002\n  ]\n ]\n]\n[\n 16,\n [\n  [\n   \"sad\",\n   7.040000000000003\n  ],\n  [\n   \"neutral\",\n   4.32\n  ],\n  [\n   \"happy\",\n   1.6000000000000003\n  ]\n ]\n]\n[\n 17,\n [\n  [\n   \"sad\",\n   7.480000000000003\n  ],\n  [\n   \"neutral\",\n   4.59\n  ],\n  [\n   \"happy\",\n   1.7000000000000004\n  ]\n ]\n]\n[\n 18,\n [\n  [\n   \"sad\",\n   7.9200000000000035\n  ],\n  [\n   \"neutral\",\n   4.859999999999999\n  ],\n  [\n   \"happy\",\n   1.8000000000000005\n  ]\n ]\n]\n[\n 19,\n [\n  [\n   \"sad\",\n   8.360000000000003\n  ],\n  [\n   \"neutral\",\n   5.129999999999999\n  ],\n  [\n   \"happy\",\n   1.9000000000000006\n  ]\n ]\n]\n[\n 20,\n [\n  [\n   \"sad\",\n   8.800000000000002\n  ],\n  [\n   \"neutral\",\n   5.399999999999999\n  ],\n  [\n   \"happy\",\n   2.0000000000000004\n  ]\n ]\n]\n[\n 21,\n [\n  [\n   \"sad\",\n   9.050000000000002\n  ],\n  [\n   \"neutral\",\n   5.509999999999999\n  ],\n  [\n   \"happy\",\n   2.4800000000000004\n  ],\n  [\n   \"angry\",\n   0.11\n  ]\n ]\n]\n[\n 22,\n [\n  [\n   \"sad\",\n   9.300000000000002\n  ],\n  [\n   \"neutral\",\n   5.619999999999999\n  ],\n  [\n   \"happy\",\n   2.9600000000000004\n  ],\n  [\n   \"angry\",\n   0.22\n  ]\n ]\n]\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759485840.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "[\n 1,\n [\n  [\n   \"sad\",\n   0.44\n  ],\n  [\n   \"neutral\",\n   0.27\n  ],\n  [\n   \"happy\",\n   0.1\n  ]\n ]\n]\n[\n 2,\n [\n  [\n   \"sad\",\n   0.88\n  ],\n  [\n   \"neutral\",\n   0.54\n  ],\n  [\n   \"happy\",\n   0.2\n  ]\n ]\n]\n[\n 3,\n [\n  [\n   \"sad\",\n   1.32\n  ],\n  [\n   \"neutral\",\n   0.81\n  ],\n  [\n   \"happy\",\n   0.30000000000000004\n  ]\n ]\n]\n[\n 4,\n [\n  [\n   \"sad\",\n   1.76\n  ],\n  [\n   \"neutral\",\n   1.08\n  ],\n  [\n   \"happy\",\n   0.4\n  ]\n ]\n]\n[\n 5,\n [\n  [\n   \"sad\",\n   2.2\n  ],\n  [\n   \"neutral\",\n   1.35\n  ],\n  [\n   \"happy\",\n   0.5\n  ]\n ]\n]\n[\n 6,\n [\n  [\n   \"sad\",\n   2.64\n  ],\n  [\n   \"neutral\",\n   1.62\n  ],\n  [\n   \"happy\",\n   0.6\n  ]\n ]\n]\n[\n 7,\n [\n  [\n   \"sad\",\n   3.08\n  ],\n  [\n   \"neutral\",\n   1.8900000000000001\n  ],\n  [\n   \"happy\",\n   0.7\n  ]\n ]\n]\n[\n 8,\n [\n  [\n   \"sad\",\n   3.52\n  ],\n  [\n   \"neutral\",\n   2.16\n  ],\n  [\n   \"happy\",\n   0.7999999999999999\n  ]\n ]\n]\n[\n 9,\n [\n  [\n   \"sad\",\n   3.96\n  ],\n  [\n   \"neutral\",\n   2.43\n  ],\n  [\n   \"happy\",\n   0.8999999999999999\n  ]\n ]\n]\n[\n 10,\n [\n  [\n   \"sad\",\n   4.4\n  ],\n  [\n   \"neutral\",\n   2.7\n  ],\n  [\n   \"happy\",\n   0.9999999999999999\n  ]\n ]\n]\n[\n 11,\n [\n  [\n   \"sad\",\n   4.840000000000001\n  ],\n  [\n   \"neutral\",\n   2.97\n  ],\n  [\n   \"happy\",\n   1.0999999999999999\n  ]\n ]\n]\n[\n 12,\n [\n  [\n   \"sad\",\n   5.280000000000001\n  ],\n  [\n   \"neutral\",\n   3.24\n  ],\n  [\n   \"happy\",\n   1.2\n  ]\n ]\n]\n[\n 13,\n [\n  [\n   \"sad\",\n   5.7200000000000015\n  ],\n  [\n   \"neutral\",\n   3.5100000000000002\n  ],\n  [\n   \"happy\",\n   1.3\n  ]\n ]\n]\n[\n 14,\n [\n  [\n   \"sad\",\n   6.160000000000002\n  ],\n  [\n   \"neutral\",\n   3.7800000000000002\n  ],\n  [\n   \"happy\",\n   1.4000000000000001\n  ]\n ]\n]\n[\n 15,\n [\n  [\n   \"sad\",\n   6.600000000000002\n  ],\n  [\n   \"neutral\",\n   4.050000000000001\n  ],\n  [\n   \"happy\",\n   1.5000000000000002\n  ]\n ]\n]\n[\n 16,\n [\n  [\n   \"sad\",\n   7.040000000000003\n  ],\n  [\n   \"neutral\",\n   4.32\n  ],\n  [\n   \"happy\",\n   1.6000000000000003\n  ]\n ]\n]\n[\n 17,\n [\n  [\n   \"sad\",\n   7.480000000000003\n  ],\n  [\n   \"neutral\",\n   4.59\n  ],\n  [\n   \"happy\",\n   1.7000000000000004\n  ]\n ]\n]\n[\n 18,\n [\n  [\n   \"sad\",\n   7.9200000000000035\n  ],\n  [\n   \"neutral\",\n   4.859999999999999\n  ],\n  [\n   \"happy\",\n   1.8000000000000005\n  ]\n ]\n]\n[\n 19,\n [\n  [\n   \"sad\",\n   8.360000000000003\n  ],\n  [\n   \"neutral\",\n   5.129999999999999\n  ],\n  [\n   \"happy\",\n   1.9000000000000006\n  ]\n ]\n]\n[\n 20,\n [\n  [\n   \"sad\",\n   8.800000000000002\n  ],\n  [\n   \"neutral\",\n   5.399999999999999\n  ],\n  [\n   \"happy\",\n   2.0000000000000004\n  ]\n ]\n]\n[\n 21,\n [\n  [\n   \"sad\",\n   9.050000000000002\n  ],\n  [\n   \"neutral\",\n   5.509999999999999\n  ],\n  [\n   \"happy\",\n   2.4800000000000004\n  ],\n  [\n   \"angry\",\n   0.11\n  ]\n ]\n]\n[\n 22,\n [\n  [\n   \"sad\",\n   9.300000000000002\n  ],\n  [\n   \"neutral\",\n   5.619999999999999\n  ],\n  [\n   \"happy\",\n   2.9600000000000004\n  ],\n  [\n   \"angry\",\n   0.22\n  ]\n ]\n]\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759486528.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759488842.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "sad"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759492344.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  ()\n)",
                      "language": "javascript",
                      "output": "sad"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759497668.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  rewrite()\n)",
                      "language": "javascript",
                      "output": "sad"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759498368.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "sad"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759499833.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759500975.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759504756.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759506168.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759507405.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759509851.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  \n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759510850.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  imshow()\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"sad\"\n\"sad\"\n\"sad\"\n\"sad\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759512409.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  imshow(),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759513487.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  imshow(),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759514744.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  imshow(),\n\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759521472.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  imshow()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759522473.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  imshow()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759523860.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  imshow(),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759537042.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759549867.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"neutral\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759553650.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"neutral\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759555049.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"neutral\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759556278.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"neutral\"\n\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759557703.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"neutral\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759559081.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"neutral\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759561292.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy]) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"neutral\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759564128.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"neutral\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759565185.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759565960.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759569468.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759570776.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy]) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759572323.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy', 'sad', 'neutral']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759575241.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759579845.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759580453.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759584821.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759589787.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"neutral\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759595470.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"neutral\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759597706.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759607961.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759611777.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759613554.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759614807.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759616180.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759617697.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759621250.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759622901.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682759624990.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682784467936.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n json\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785422537.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n jsonToTree\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785424996.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  jsonToTree\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785426355.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785427268.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  jsonToTable()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785431865.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  jsonToTable()\n)",
                      "language": "javascript",
                      "output": "<nk-table class=\"w100\" _nghost-serverapp-c72=\"\" ng-version=\"15.2.5\"><section _ngcontent-serverapp-c72=\"\" class=\"ng-star-inserted\"><mat-form-field _ngcontent-serverapp-c72=\"\" class=\"mat-mdc-form-field w100 ng-tns-c6-4 mat-mdc-form-field-type-mat-input mat-form-field-appearance-fill mat-form-field-hide-placeholder mat-primary ng-star-inserted\"><!----><div class=\"mat-mdc-text-field-wrapper mdc-text-field ng-tns-c6-4 mdc-text-field--filled\"><div class=\"mat-mdc-form-field-focus-overlay ng-tns-c6-4 ng-star-inserted\"></div><!----><div class=\"mat-mdc-form-field-flex ng-tns-c6-4\"><!----><!----><!----><div class=\"mat-mdc-form-field-infix ng-tns-c6-4\"><label matformfieldfloatinglabel=\"\" class=\"mdc-floating-label mat-mdc-floating-label ng-tns-c6-4 ng-star-inserted\" id=\"mat-mdc-form-field-label-0\" for=\"mat-input-0\" aria-owns=\"mat-input-0\"><mat-label _ngcontent-serverapp-c72=\"\" class=\"ng-tns-c6-4\">Filter</mat-label><!----></label><!----><!----><!----><input _ngcontent-serverapp-c72=\"\" matinput=\"\" placeholder=\"Ex. Mia\" class=\"mat-mdc-input-element ng-tns-c6-4 mat-mdc-form-field-input-control mdc-text-field__input cdk-text-field-autofill-monitored\" id=\"mat-input-0\" aria-invalid=\"false\" aria-required=\"false\"></div><!----><!----></div><div matformfieldlineripple=\"\" class=\"mdc-line-ripple ng-tns-c6-4 mdc-line-ripple--deactivating ng-star-inserted\"></div><!----></div><div class=\"mat-mdc-form-field-subscript-wrapper mat-mdc-form-field-bottom-align ng-tns-c6-4\"><!----><div class=\"mat-mdc-form-field-hint-wrapper ng-tns-c6-4 ng-trigger ng-trigger-transitionMessages ng-star-inserted\" style=\"opacity: 1; transform: translateY(0%);\"><!----><div class=\"mat-mdc-form-field-hint-spacer ng-tns-c6-4\"></div></div><!----></div></mat-form-field><div _ngcontent-serverapp-c72=\"\" matsort=\"\" class=\"mat-sort mat-elevation-z8\"><table _ngcontent-serverapp-c72=\"\" mat-table=\"\" class=\"mat-mdc-table mdc-data-table__table cdk-table\" role=\"table\"><thead role=\"rowgroup\"><tr _ngcontent-serverapp-c72=\"\" role=\"row\" mat-header-row=\"\" class=\"mat-mdc-header-row mdc-data-table__header-row cdk-header-row ng-star-inserted\"><!----></tr><!----></thead><tbody role=\"rowgroup\" class=\"mdc-data-table__content\"><!----><tr _ngcontent-serverapp-c72=\"\" class=\"mat-row mat-mdc-no-data-row ng-star-inserted\" role=\"row\"><td _ngcontent-serverapp-c72=\"\" colspan=\"4\" class=\"mat-cell\">No data matching the filter \"\"</td></tr><!----></tbody><tfoot role=\"rowgroup\" style=\"display: none; bottom: 0px; z-index: 10;\" class=\"mat-mdc-table-sticky\"><!----></tfoot></table><mat-paginator _ngcontent-serverapp-c72=\"\" role=\"group\" aria-label=\"Select page of rows\" class=\"mat-mdc-paginator\"><div class=\"mat-mdc-paginator-outer-container\"><div class=\"mat-mdc-paginator-container\"><div class=\"mat-mdc-paginator-page-size ng-star-inserted\"><div class=\"mat-mdc-paginator-page-size-label\" id=\"mat-paginator-page-size-label-0\"> Items per page: </div><mat-form-field class=\"mat-mdc-form-field mat-mdc-paginator-page-size-select ng-tns-c6-5 mat-mdc-form-field-type-mat-select mat-form-field-appearance-outline mat-primary ng-star-inserted\"><!----><div class=\"mat-mdc-text-field-wrapper mdc-text-field ng-tns-c6-5 mdc-text-field--outlined mdc-text-field--no-label\"><!----><div class=\"mat-mdc-form-field-flex ng-tns-c6-5\"><div matformfieldnotchedoutline=\"\" class=\"mdc-notched-outline ng-tns-c6-5 mdc-notched-outline--no-label ng-star-inserted mdc-notched-outline--notched\"><div class=\"mdc-notched-outline__leading\"></div><div class=\"mdc-notched-outline__notch\" style=\"width: 0px;\"><!----><!----><!----></div><div class=\"mdc-notched-outline__trailing\"></div></div><!----><!----><!----><div class=\"mat-mdc-form-field-infix ng-tns-c6-5\"><!----><mat-select role=\"combobox\" aria-autocomplete=\"none\" aria-haspopup=\"listbox\" hidesingleselectionindicator=\"\" class=\"mat-mdc-select ng-tns-c26-6 ng-tns-c6-5 ng-star-inserted\" aria-labelledby=\"mat-select-value-1 mat-paginator-page-size-label-0\" id=\"mat-select-0\" tabindex=\"0\" aria-expanded=\"false\" aria-required=\"false\" aria-disabled=\"false\" aria-invalid=\"false\"><div cdk-overlay-origin=\"\" class=\"mat-mdc-select-trigger ng-tns-c26-6\"><div class=\"mat-mdc-select-value ng-tns-c26-6\" id=\"mat-select-value-1\"><!----><span class=\"mat-mdc-select-value-text ng-tns-c26-6 ng-star-inserted\"><span class=\"mat-mdc-select-min-line ng-tns-c26-6 ng-star-inserted\">5</span><!----><!----></span><!----></div><div class=\"mat-mdc-select-arrow-wrapper ng-tns-c26-6\"><div class=\"mat-mdc-select-arrow ng-tns-c26-6\"><svg viewBox=\"0 0 24 24\" width=\"24px\" height=\"24px\" focusable=\"false\" class=\"ng-tns-c26-6\"><path d=\"M7 10l5 5 5-5z\" class=\"ng-tns-c26-6\"></path></svg></div></div></div><!----></mat-select></div><!----><!----></div><!----></div><div class=\"mat-mdc-form-field-subscript-wrapper mat-mdc-form-field-bottom-align ng-tns-c6-5\"><!----><div class=\"mat-mdc-form-field-hint-wrapper ng-tns-c6-5 ng-trigger ng-trigger-transitionMessages ng-star-inserted\" style=\"opacity: 1; transform: translateY(0%);\"><!----><div class=\"mat-mdc-form-field-hint-spacer ng-tns-c6-5\"></div></div><!----></div></mat-form-field><!----><!----></div><!----><div class=\"mat-mdc-paginator-range-actions\"><div aria-live=\"polite\" class=\"mat-mdc-paginator-range-label\"> 0 of 0 </div><!----><button mat-icon-button=\"\" type=\"button\" class=\"mat-mdc-tooltip-trigger mat-mdc-paginator-navigation-previous mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\" aria-label=\"Previous page\" disabled=\"true\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><svg viewBox=\"0 0 24 24\" focusable=\"false\" class=\"mat-mdc-paginator-icon\"><path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"></path></svg><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><!----><button mat-icon-button=\"\" type=\"button\" class=\"mat-mdc-tooltip-trigger mat-mdc-paginator-navigation-next mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\" aria-label=\"Next page\" disabled=\"true\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><svg viewBox=\"0 0 24 24\" focusable=\"false\" class=\"mat-mdc-paginator-icon\"><path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"></path></svg><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><!----><!----></div></div></div></mat-paginator></div></section><!----></nk-table>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785432948.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785448677.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785449708.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  dispal()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785459148.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  display()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785461380.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  display()\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">TypeError: Unable to lift unknown Observable type</pre>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785462419.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  display\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">TypeError: Unable to lift unknown Observable type</pre>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785464357.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  display\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785465584.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  display\n)",
                      "language": "javascript",
                      "output": "[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.97,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.97,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.97,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.97,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.97,\n  \"emotion\": \"happy\"\n }\n]\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785613520.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.87,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.97,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.97,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.97,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.97,\n  \"emotion\": \"happy\"\n }\n]\n[\n {\n  \"score\": 0.97,\n  \"emotion\": \"happy\"\n }\n]\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785621524.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785629202.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785643049.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785644547.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785645982.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785647468.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785648848.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785650436.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785652018.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785653354.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785654643.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785656171.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785657516.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785658849.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785660151.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785661436.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785662821.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785664189.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785665500.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785666845.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785668164.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785669436.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785670829.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785672159.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785676325.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785677010.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  jsonToTree()\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785680571.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785684194.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785685524.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" mattreenodetoggle=\"\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\" aria-label=\"Toggle Object 0\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><i _ngcontent-serverapp-c77=\"\" aria-hidden=\"true\" class=\"mat-icon-rtl-mirror fa-chevron-right fa-sharp fa-solid\"></i><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">Object 0</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" mattreenodetoggle=\"\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\" aria-label=\"Toggle Object 1\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><i _ngcontent-serverapp-c77=\"\" aria-hidden=\"true\" class=\"mat-icon-rtl-mirror fa-chevron-right fa-sharp fa-solid\"></i><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">Object 1</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" mattreenodetoggle=\"\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\" aria-label=\"Toggle Object 2\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><i _ngcontent-serverapp-c77=\"\" aria-hidden=\"true\" class=\"mat-icon-rtl-mirror fa-chevron-right fa-sharp fa-solid\"></i><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">Object 2</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785698042.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  ",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" mattreenodetoggle=\"\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\" aria-label=\"Toggle Object 0\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><i _ngcontent-serverapp-c77=\"\" aria-hidden=\"true\" class=\"mat-icon-rtl-mirror fa-chevron-right fa-sharp fa-solid\"></i><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">Object 0</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" mattreenodetoggle=\"\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\" aria-label=\"Toggle Object 1\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><i _ngcontent-serverapp-c77=\"\" aria-hidden=\"true\" class=\"mat-icon-rtl-mirror fa-chevron-right fa-sharp fa-solid\"></i><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">Object 1</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" mattreenodetoggle=\"\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\" aria-label=\"Toggle Object 2\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><i _ngcontent-serverapp-c77=\"\" aria-hidden=\"true\" class=\"mat-icon-rtl-mirror fa-chevron-right fa-sharp fa-solid\"></i><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">Object 2</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785704202.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" mattreenodetoggle=\"\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\" aria-label=\"Toggle Object 0\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><i _ngcontent-serverapp-c77=\"\" aria-hidden=\"true\" class=\"mat-icon-rtl-mirror fa-chevron-right fa-sharp fa-solid\"></i><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">Object 0</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" mattreenodetoggle=\"\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\" aria-label=\"Toggle Object 1\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><i _ngcontent-serverapp-c77=\"\" aria-hidden=\"true\" class=\"mat-icon-rtl-mirror fa-chevron-right fa-sharp fa-solid\"></i><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">Object 1</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" mattreenodetoggle=\"\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\" aria-label=\"Toggle Object 2\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><i _ngcontent-serverapp-c77=\"\" aria-hidden=\"true\" class=\"mat-icon-rtl-mirror fa-chevron-right fa-sharp fa-solid\"></i><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">Object 2</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785706036.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  \n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" mattreenodetoggle=\"\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\" aria-label=\"Toggle Object 0\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><i _ngcontent-serverapp-c77=\"\" aria-hidden=\"true\" class=\"mat-icon-rtl-mirror fa-chevron-right fa-sharp fa-solid\"></i><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">Object 0</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" mattreenodetoggle=\"\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\" aria-label=\"Toggle Object 1\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><i _ngcontent-serverapp-c77=\"\" aria-hidden=\"true\" class=\"mat-icon-rtl-mirror fa-chevron-right fa-sharp fa-solid\"></i><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">Object 1</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" mattreenodetoggle=\"\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\" aria-label=\"Toggle Object 2\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><i _ngcontent-serverapp-c77=\"\" aria-hidden=\"true\" class=\"mat-icon-rtl-mirror fa-chevron-right fa-sharp fa-solid\"></i><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">Object 2</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785711883.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  \n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" mattreenodetoggle=\"\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\" aria-label=\"Toggle Object 0\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><i _ngcontent-serverapp-c77=\"\" aria-hidden=\"true\" class=\"mat-icon-rtl-mirror fa-chevron-right fa-sharp fa-solid\"></i><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">Object 0</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" mattreenodetoggle=\"\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\" aria-label=\"Toggle Object 1\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><i _ngcontent-serverapp-c77=\"\" aria-hidden=\"true\" class=\"mat-icon-rtl-mirror fa-chevron-right fa-sharp fa-solid\"></i><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">Object 1</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" mattreenodetoggle=\"\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\" aria-label=\"Toggle Object 2\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><i _ngcontent-serverapp-c77=\"\" aria-hidden=\"true\" class=\"mat-icon-rtl-mirror fa-chevron-right fa-sharp fa-solid\"></i><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">Object 2</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785715661.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  display\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" mattreenodetoggle=\"\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\" aria-label=\"Toggle Object 0\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><i _ngcontent-serverapp-c77=\"\" aria-hidden=\"true\" class=\"mat-icon-rtl-mirror fa-chevron-right fa-sharp fa-solid\"></i><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">Object 0</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" mattreenodetoggle=\"\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\" aria-label=\"Toggle Object 1\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><i _ngcontent-serverapp-c77=\"\" aria-hidden=\"true\" class=\"mat-icon-rtl-mirror fa-chevron-right fa-sharp fa-solid\"></i><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">Object 1</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" mattreenodetoggle=\"\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\" aria-label=\"Toggle Object 2\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><i _ngcontent-serverapp-c77=\"\" aria-hidden=\"true\" class=\"mat-icon-rtl-mirror fa-chevron-right fa-sharp fa-solid\"></i><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">Object 2</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785717720.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  display\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785718227.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  display\n)",
                      "language": "javascript",
                      "output": "{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785721794.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion.),\n  display\n)",
                      "language": "javascript",
                      "output": "{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785733946.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion.sort()),\n  display\n)",
                      "language": "javascript",
                      "output": "{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785735228.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion.sort(amb)),\n  display\n)",
                      "language": "javascript",
                      "output": "{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785737724.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion.sort(a,b)),\n  display\n)",
                      "language": "javascript",
                      "output": "{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785739252.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion.sort()),\n  display\n)",
                      "language": "javascript",
                      "output": "{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785740228.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  display\n)",
                      "language": "javascript",
                      "output": "{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785741964.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree\n)",
                      "language": "javascript",
                      "output": "{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.38,\n \"emotion\": \"happy\"\n}\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785748361.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785749379.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><!----></mat-tree></nk-tree>\"u=&gt;{if(s(u))return u.lift(function(h){try{return o(h,this)}catch(D){this.error(D)}});throw new TypeError(\\\"Unable to lift unknown Observable type\\\")}\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785750748.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785753035.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785754444.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785799163.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785801110.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785821922.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785824452.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785825757.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785862339.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785863761.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.53</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion angry</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785875589.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785880269.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682785881363.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786005287.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786006797.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.91</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion angry</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786008108.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.94</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion angry</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786010100.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.9</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion angry</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786012620.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786013364.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.71</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion angry</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786016324.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.95</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion angry</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786017388.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786019404.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.69</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion angry</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786023502.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.86</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion angry</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786024532.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.89</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion angry</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786026533.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786029732.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(),\n  concatMap(x => human.detect(x.message)),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786036108.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786039011.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786042973.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  t\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786047365.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  thro\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786048449.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttle\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786049381.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000)\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786051209.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786052204.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786053216.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786075116.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786080076.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786080893.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786097142.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(100),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786103620.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(100),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786108900.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(100),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786111911.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(100),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786114884.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(100),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786117885.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(100),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786120706.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(100),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786123545.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786127247.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786127738.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786140724.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  \n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786148357.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786149324.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),throttleTime(500),\n  display\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786151404.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  throttleTime(500),\n  display\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786152276.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  throttleTime(500),\n  display\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786153508.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  throttleTime(500),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786156606.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  throttleTime(500),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786157827.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  throttleTime(500),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786159124.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  throttleTime(500),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786160356.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  throttleTime(500),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786161766.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  throttleTime(500),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786162856.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  throttleTime(500),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786163996.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  throttleTime(500),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786165340.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  throttleTime(500),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786166508.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  throttleTime(500),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786168434.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  \n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786170996.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786171986.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786174550.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[]),\n  display\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786181053.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  display\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786181987.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  display\n)",
                      "language": "javascript",
                      "output": "{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786184424.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  display\n)",
                      "language": "javascript",
                      "output": "{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786184908.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  display\n)",
                      "language": "javascript",
                      "output": "{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786185484.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  display\n)",
                      "language": "javascript",
                      "output": "{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.94,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.94,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.94,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.94,\n \"emotion\": \"angry\"\n}\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786187658.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  display\n)",
                      "language": "javascript",
                      "output": "{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.94,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.94,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.94,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.94,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.99,\n \"emotion\": \"happy\"\n}\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786188236.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  display\n)",
                      "language": "javascript",
                      "output": "{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.94,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.94,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.94,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.94,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.99,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.98,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.99,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.99,\n \"emotion\": \"happy\"\n}\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786190042.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  jsonToTreee\n)",
                      "language": "javascript",
                      "output": "{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.94,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.94,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.94,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.94,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.99,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.98,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.99,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.99,\n \"emotion\": \"happy\"\n}\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786195089.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.89,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.94,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.94,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.94,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.94,\n \"emotion\": \"angry\"\n}\n{\n \"score\": 0.99,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.98,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.99,\n \"emotion\": \"happy\"\n}\n{\n \"score\": 0.99,\n \"emotion\": \"happy\"\n}\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786196068.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786196969.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786198469.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.91</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786200236.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786201298.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.8</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion angry</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786203446.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.91</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion angry</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786203974.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.93</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion angry</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786206006.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786206534.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.63</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion angry</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786208034.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.79</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion angry</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786208586.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.89</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion angry</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786209165.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  jsonToTree()\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786209761.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(500),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[]),\n  display\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786217354.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  \n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786218997.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786222733.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  \n  display\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786223292.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  throttleTime(500),\n  display\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786223964.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion),\n  scan((acc, emotions) => {\n    emotions.forEach(emotion => \n      acc[1].set(emotion.emotion, acc[1].has(emotion.emotion) ?  acc[1].get(emotion.emotion)+emotion.score : emotion.score)\n    )\n    return [(acc[0]+1)%24, acc[1]]\n  }, [0,new Map()]),\n  filter(x => x[0] === 23),\n  map(emotions => {\n    let max = [\"\", -1]\n    emotions[1].toJSON().forEach(emotion => {\n      const mean = emotion[1]/24\n      max  = max[1] < mean ? [emotion[0],mean] : max\n    })\n    return max[0]\n  }),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786226819.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786234876.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0][0]),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786246369.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0]),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786248790.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "<nk-tree class=\"w100\" _nghost-serverapp-c77=\"\" ng-version=\"15.2.5\"><mat-tree _ngcontent-serverapp-c77=\"\" role=\"tree\" class=\"mat-tree cdk-tree\"><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">score 0.99</div></mat-tree-node><mat-tree-node _ngcontent-serverapp-c77=\"\" mattreenodepadding=\"\" class=\"mat-tree-node cdk-tree-node ng-star-inserted\" role=\"treeitem\" aria-level=\"1\" aria-expanded=\"false\" style=\"padding-left: 0px;\"><button _ngcontent-serverapp-c77=\"\" mat-icon-button=\"\" disabled=\"true\" class=\"mdc-icon-button mat-mdc-icon-button mat-unthemed mat-mdc-button-base\"><span class=\"mat-mdc-button-persistent-ripple mdc-icon-button__ripple\"></span><span class=\"mat-mdc-focus-indicator\"></span><span matripple=\"\" class=\"mat-ripple mat-mdc-button-ripple\"></span><span class=\"mat-mdc-button-touch-target\"></span></button><div _ngcontent-serverapp-c77=\"\">emotion happy</div></mat-tree-node><!----></mat-tree></nk-tree>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786251532.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786252588.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786255339.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786256322.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786257455.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786258466.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786259539.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786284843.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786285843.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please '+dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786286840.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'Please 'dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786291592.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786292548.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786293240.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786297116.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786300255.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786301356.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786302376.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786303371.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786304492.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786305340.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786306445.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786307378.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786308422.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786309600.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786310564.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786311612.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786312668.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786313666.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786314803.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786315731.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786316787.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786317748.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786318989.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786320043.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786320779.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786321884.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786322860.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786323883.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786325039.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786325908.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786326989.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786328031.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786328993.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786330036.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786331038.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786333021.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786333027.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786334009.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786335200.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786336111.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786337042.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786338127.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786339182.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786340167.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786341249.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786342317.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786343231.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786344105.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786345238.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786346460.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786347253.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786348374.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786349271.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786350366.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786351748.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786352755.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"happy\"\n\"happy\"\n\"happy\"\n\"angry\"\n\"angry\"\n\"angry\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786353523.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786362927.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  \n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786388164.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  map()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786393940.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  map(_ => )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786395507.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  map(_ => total),\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786398100.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  map(_ => total),\n  display\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786400231.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  map(_ => total),\n  display\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786405996.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  map(_ => total),\n  display\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786406955.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  map(_ => total),\n  display\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786407932.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  map(_ => total),\n  display\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786409020.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  map(_ => total),\n  display\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786410132.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  map(_ => total),\n  display\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786411172.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  map(_ => total),\n  display\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786422388.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  map(_ => total),\n  display\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786423489.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  nao*\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786469086.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = 'dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786470152.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return [total, next]\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786471214.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  let total = 0\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            total++\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786477211.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion)),\n  filter(_ => total === 2),\n  write(x => \"1\")\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786480782.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786483605.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  write,\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786523951.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  write(),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786525004.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  write(x => \"Y\"),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786527691.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(x => \"Y\"),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786528797.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(x => \"You're\"),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786531229.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(x => \"You're \"),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786531798.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(x => \"You're ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786534869.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(x => `${}`),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786537150.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(x => `${Y}`),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786538082.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(x => `${}`),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786539350.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(x => `You're ${}`),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786541222.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(x => `You're ${}`),\n  speak\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786543287.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(x => `You're ${}`),\n  speak,\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786547956.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  do\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786552620.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  doAside()\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786554196.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  doAside(\n    rewrite(x => `You're ${}`),\n  speak,\n  )\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786555092.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  doAside(\n    rewrite(x => `You're ${}`),\n    speak,\n  )\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786557435.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  doAside(\n    rewrite(x => `You're ${x}`),\n    speak,\n  )\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786560361.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  doAside(\n    rewrite(emotion => `You're ${x}`),\n    speak,\n  )\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786562498.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  doAside(\n    rewrite(emotion => `You're ${emotion}`),\n    speak\n  )\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"angry\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n0\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786565628.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  doAside(\n    rewrite(emotion => `You're ${emotion}`),\n    speak\n  )\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786566402.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  doAside(\n    rewrite(emotion => `You're ${emotion}`),\n    speak\n  )\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">SyntaxError: missing ) after argument list</pre>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786567617.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  doAside(\n    rewrite(emotion => `You're ${emotion}`),\n    speak\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786569932.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  doAside(\n    rewrite(emotion => `You're ${emotion}`),\n    speak\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">TypeError: (intermediate value) is not iterable</pre>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786570871.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  doAside(\n    rewrite(emotion => `You're ${emotion}`)\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786582200.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  doAside(\n    rewrite(emotion => `You're ${emotion}`)\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">TypeError: (intermediate value) is not iterable</pre>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786583752.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => `You're ${emotion}`)\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">TypeError: (intermediate value) is not iterable</pre>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786597607.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => `You're ${emotion}`),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786599291.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => `You're ${emotion}`),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">TypeError: (intermediate value) is not iterable</pre>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786600265.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion)\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">TypeError: (intermediate value) is not iterable</pre>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786608270.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">TypeError: (intermediate value) is not iterable</pre>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786608831.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  \n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">TypeError: (intermediate value) is not iterable</pre>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786609660.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786610853.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next] = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">TypeError: (intermediate value) is not iterable</pre>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786612366.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst [total,next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">TypeError: (intermediate value) is not iterable</pre>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786615798.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">TypeError: (intermediate value) is not iterable</pre>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786617462.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786617963.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n    rewrite(emotion => `You're ${emotion}`),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786622011.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => `You're ${emotion}`),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786622900.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => `You're ${emotion}`),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "You're happy"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786631932.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => `You're ${emotion}`),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "You're angry"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786636588.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => `<h1>You're ${emotion}`),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "You're angry"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786641526.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => `<h1>You're ${emotion}</h1>`),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "You're angry"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786643612.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => `<h1>You're ${emotion}</h1>`),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786645148.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => `<h1>You're ${emotion}</h1>`),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786648532.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion}</h1>`),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786672521.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion}</h1>`\n         ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786673669.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion}</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786675198.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${}</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786681563.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${when}</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786683261.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${when()}</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786684135.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${when(emotion).}</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786685900.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${match(emotion).}</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786692763.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${match(emotion).with()}</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786695158.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion).with()}</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786697158.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion).with()\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786699221.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion).with(\"angry\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786705782.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786713327.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", ())\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786714797.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => \"\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786716260.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => \"emotion\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786718106.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => \"\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786718676.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => \"<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786799672.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => \"\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786800945.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => ``)\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786801751.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`)\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786802244.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n        \n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786887838.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786891078.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\",  <i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i>)\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786892751.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\",  ())\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786893710.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\",  () => ``)\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786895298.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\",  () => `<i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i>`)\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786896173.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\",  () => `<i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i>`)\n      \n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786907313.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\",  () => `<i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i>`)\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786908236.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\",  () => `<i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i>`).\n      \n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786909159.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\",  () => `<i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i>`).\n      otherise(\"\" => \"\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786914156.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\",  () => `<i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i>`).\n      otherise(_ => \"\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry</h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786916536.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\",  () => `<i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i>`).\n      otherise(_ => \"\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786918899.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\",  () => `<i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i>`).\n      otherise(_ => \"\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "Uncaught TypeError: match(...).with(...).with(...).otherise is not a function\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786926692.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\",  () => `<i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i>`).\n         (_ => \"\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "Uncaught TypeError: match(...).with(...).with(...).otherise is not a function\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786931980.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\",  () => `<i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i>`).\n         ot(_ => \"\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "Uncaught TypeError: match(...).with(...).with(...).otherise is not a function\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786933110.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\",  () => `<i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i>`).\n         oth(_ => \"\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "Uncaught TypeError: match(...).with(...).with(...).otherise is not a function\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786935388.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\",  () => `<i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i>`).\n         otherwise(_ => \"\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786937393.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\",  () => `<i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i>`).\n         otherwise(_ => \"\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're happy <i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i></h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786940892.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\",  () => `<i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i>`).\n         otherwise(_ => \"\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry <i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i></h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786957065.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\",  () => `<i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i>`).\n         otherwise(_ => \"\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're happy <i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i></h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786959240.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\",  () => `<i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i>`).\n         otherwise(_ => \"\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry <i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i></h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786965310.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\",  () => `<i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i>`).\n         otherwise(_ => \"\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're neutral </h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786967238.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\",  () => `<i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i>`).\n         otherwise(_ => \"\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're happy <i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i></h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786969015.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\",  () => `<i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i>`).\n         otherwise(_ => \"\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're angry <i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i></h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786975268.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(emotion => \n    `<h1>You're ${emotion} ${\n      match(emotion)\n         .with(\"angry\", () => `<i class=\"fa-solid fa-face-angry fa-beat-fade\" style=\"color: #c01c28;\"></i>`).\n         with(\"happy\",  () => `<i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i>`).\n         otherwise(_ => \"\")\n    }</h1>`\n  ),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're happy <i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i></h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786977236.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  \n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're happy <i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i></h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786983582.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rew\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're happy <i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i></h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786984540.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite()\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're happy <i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i></h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786987995.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "<h1>You're happy <i class=\"fa-sharp fa-regular fa-face-smile fa-beat-fade\" style=\"color: #f6d32d;\"></i></h1>"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786988777.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786989439.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  rewrite(),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "happy"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682786992572.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "neutral"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682787000896.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682787002473.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  \n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682787004306.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682787007542.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682787011436.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  display,\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682787012585.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682788979748.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789245958.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return Prm\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789267492.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return Promise\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789269340.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789271604.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789284732.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789290652.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789295380.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789296380.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789297548.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`${}`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789301044.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${}`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789303148.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${user}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789305692.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": "\"happy\"\n\"happy\"\n\"happy\"\n"
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789306341.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry</h1>',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789312812.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': '<h1>Be angry',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789361427.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry',\n    'happy': '<h1>Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789363444.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry',\n    'happy': 'Be happy</h1>',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789370309.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry',\n    'happy': 'Be happy<',\n    'sad': '<h1>Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789371981.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry',\n    'happy': 'Be happy<',\n    'sad': 'Be sad</h1>',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789373724.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry',\n    'happy': 'Be happy<',\n    'sad': 'Be sad',\n    'neutral': '<h1>Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789375252.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry',\n    'happy': 'Be happy<',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral</h1>',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789376333.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry',\n    'happy': 'Be happy<',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': '<h1>Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789377908.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry',\n    'happy': 'Be happy<',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fearl</h1>',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789379852.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry',\n    'happy': 'Be happy<',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fearl<',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789381026.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry',\n    'happy': 'Be happy<',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fearl',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789381700.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry',\n    'happy': 'Be happy',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fearl',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789383868.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry',\n    'happy': 'Be happy',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789413259.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': () => 'Be angry',\n    'happy': 'Be happy',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789420604.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': () => 'Be angry',\n    'happy': () => 'Be happy',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789423548.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': () => 'Be angry',\n    'happy': () => 'Be happy',\n    'sad': () => 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789426396.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': () => 'Be angry',\n    'happy': () => 'Be happy',\n    'sad': () => 'Be sad',\n    'neutral': () => 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789428201.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': () => 'Be angry',\n    'happy': () => 'Be happy',\n    'sad': () => 'Be sad',\n    'neutral': () => 'Be neutral',\n    'fear': () => 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789430992.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': () => 'Be angry',\n    'happy': () => 'Be happy',\n    'sad': () => 'Be sad',\n    'neutral': () => 'Be neutral',\n    'fear': () => 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]()\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789434916.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': () => 'Be angry',\n    'happy': () => 'Be happy',\n    'sad': () => 'Be sad',\n    'neutral': () => 'Be neutral',\n    'fear': () => 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]()\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]()+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789439499.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': () => 'Be angry',\n    'happy': () => 'Be happy',\n    'sad': () => 'Be sad',\n    'neutral': () => 'Be neutral',\n    'fear': () => 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]()\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]()\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789441316.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': (x) => 'Be angry',\n    'happy': () => 'Be happy',\n    'sad': () => 'Be sad',\n    'neutral': () => 'Be neutral',\n    'fear': () => 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]()\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]()\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789446645.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': (x) =>'Be angry',\n    'happy': () => 'Be happy',\n    'sad': () => 'Be sad',\n    'neutral': () => 'Be neutral',\n    'fear': () => 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]()\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]()\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789461262.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry':'Be angry',\n    'happy': () => 'Be happy',\n    'sad': () => 'Be sad',\n    'neutral': () => 'Be neutral',\n    'fear': () => 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]()\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]()\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789462156.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry',\n    'happy': () => 'Be happy',\n    'sad': () => 'Be sad',\n    'neutral': () => 'Be neutral',\n    'fear': () => 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]()\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]()\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789462863.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry',\n    'happy': 'Be happy',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fearl',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789467725.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry',\n    'happy': 'Be happy',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789470334.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry',\n    'happy': 'Be happy',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789504644.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry',\n    'happy': 'Be happy',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now. You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789524181.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry',\n    'happy': 'Be happy',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, You're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789525268.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry',\n    'happy': 'Be happy',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789525870.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-light fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'happy': 'Be happy',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789571587.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry ',\n    'happy': 'Be happy',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789575420.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry',\n    'happy': 'Be happy <i class=\"fa-light fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789576668.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-light fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789600997.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789623620.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${\n              userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789695996.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${\n              userEmotion\n            }.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789698197.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${\n            }.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789700145.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${\n              userEmotion\n            }.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789700724.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${\n              match(userEmotion)\n            }.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789703060.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${\n              match(userEmotion).\n            }.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789705588.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${\n              match(userEmotion).mat\n            }.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789706653.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${\n              match(userEmotion).m\n            }.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789708268.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${\n              match(userEmotion).mat\n            }.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789709034.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${\n              match(userEmotion)\n            }.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789710076.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${\n              match(userEmotion).with(\n                'angry'\n              )\n            }.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789713477.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${\n              match(userEmotion).with(\n                'angry', \n              )\n            }.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789714635.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${\n              match(userEmotion).with(\n                'angry', ()\n              )\n            }.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789715869.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${\n              match(userEmotion).with(\n                'angry', () => ''\n              )\n            }.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789717501.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${\n              match(userEmotion).with(\n                'angry', () => '<i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>'\n              )\n            }.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789724396.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-bounce\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${\n              match(userEmotion).with(\n                'angry', () => '<i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>'\n              )\n            }.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789738900.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-bounce\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${\n              match(userEmotion).with(\n                'angry', () => '<i class=\"fa-solid fa-face- fa-fade\" style=\"color: #ca4321;\"></i>'\n              )\n            }.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789748588.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${\n              match(userEmotion).with(\n                'angry', () => ''\n              )\n            }.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789811149.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${\n              userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789814236.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-light fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789815500.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${userEmotion}.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789816660.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${userEmotion }.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789819108.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${userEmotion } <i class=\"fa-sharp fa-solid fa-brake-warning fa-shake\" style=\"color: #dce920;\"></i>.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789820348.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad.',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${userEmotion } <i class=\"fa-sharp fa-solid fa-brake-warning fa-shake\" style=\"color: #dce920;\"></i>.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789854292.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>',\n    'sad': 'Be sad.',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${userEmotion } <i class=\"fa-sharp fa-solid fa-brake-warning fa-shake\" style=\"color: #dce920;\"></i>.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789856266.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad.',\n    'neutral': 'Be neutral',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${userEmotion } <i class=\"fa-sharp fa-solid fa-brake-warning fa-shake\" style=\"color: #dce920;\"></i>.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789858067.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${userEmotion } <i class=\"fa-sharp fa-solid fa-brake-warning fa-shake\" style=\"color: #dce920;\"></i>.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789858628.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+'. '+`Now, you're ${userEmotion } <i class=\"fa-sharp fa-solid fa-brake-warning fa-shake\" style=\"color: #dce920;\"></i>.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789860319.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`Now, you're ${userEmotion } <i class=\"fa-sharp fa-solid fa-brake-warning fa-shake\" style=\"color: #dce920;\"></i>.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789864651.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`Now, you're ${userEmotion } <i class=\"fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789915151.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`Now, you're ${userEmotion } <i class=\"fafa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789935060.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`Now, you're ${userEmotion } <i class=\"fa-fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789935666.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`Now, you're ${userEmotion } <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682789937897.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad fa-circle-exclamation.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`Now, you're ${userEmotion } <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790108068.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad .',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`Now, you're ${userEmotion } <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790108844.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`Now, you're ${userEmotion } <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790113636.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`Now, you're ${userEmotion } <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790124804.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-bounce\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`Now, you're ${userEmotion } <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790142812.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-fade\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`Now, you're ${userEmotion } <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790153111.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`Now, you're ${userEmotion } <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790163412.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`Now, you're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n            return Promise.resolve()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790251508.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790280532.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790315859.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790356848.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790418091.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790421177.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`Now, you're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 2,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790527631.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 2
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790609574.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 3
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790739450.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 3
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790878485.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = \n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790949467.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = emotion\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790951497.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = emotion\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = emotion\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790956201.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            environment.emotion = emotion\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = emotion\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790956894.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            environment.emotion = [emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = emotion\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790990240.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            environment.emotion = [emotion, user]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = emotion\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790993531.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            environment.emotion = [emotion, userEmotio]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = emotion\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790995179.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            environment.emotion = [emotion,null]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = emotion\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790997433.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            environment.emotion = [emotion, null]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = emotion\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790998825.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            environment.emotion = [emotion, null]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791001263.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            environment.emotion = [emotion, null]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion, user]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791002450.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            environment.emotion = [emotion, null]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion, userEmotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791002961.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = [emotion, null]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            environment.emotion = [emotion, null]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion, userEmotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791024447.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = [emotion, null]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = [emotion, null]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion, userEmotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791032522.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = [emotion, null]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = [emotion, null]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion, userEmotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791072030.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = [emotion, null]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = [emotion, null]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion, userEmotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791074650.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = [emotion, null]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = [emotion, null]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion, userEmotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791076199.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = [emotion, null]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = [emotion, null]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion, userEmotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791076882.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = [emotion, null]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = [emotion, null]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion, userEmotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791295904.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`Now, you're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791300153.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791304110.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+`Now, you're ${userEmotion} <i class=\"fa-solid fa-circle-exclamation fa-shake\" style=\"color: #dce920;\"></i>.`\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791305742.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '+\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791307307.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = dict[emotion]+' '\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791313582.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791314904.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = \n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791316026.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion, user]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791318524.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion, userEmotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791320078.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = dict[emotion\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion, userEmotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791323014.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = emotion\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion, userEmotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791325783.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = [emotion,null\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion, userEmotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791332602.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = [emotion,null]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion, userEmotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791333299.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = dict[emotion\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = [emotion,null]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion, userEmotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791339022.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  const dict = {\n    'angry': 'Be angry <i class=\"fa-solid fa-face-angry fa-beat\" style=\"color: #ca4321;\"></i>.',\n    'happy': 'Be happy <i class=\"fa-solid fa-face-smile fa-bounce\" style=\"color: #cabc21;\"></i>.',\n    'sad': 'Be sad <i class=\"fa-solid face-sad-tear fa-beat-fade\" style=\"color:#285fbd;\"></i>.',\n    'neutral': 'Be neutral.',\n    'fear': 'Be fear.',\n  }\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = [emotion, null]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = [emotion,null]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion, userEmotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791342794.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = [emotion, null]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = [emotion,null]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion, userEmotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791369673.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = [emotion, null]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = [emotion,null]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion, userEmotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682791370164.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 3
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794463816.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 3
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794475153.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 3
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794582504.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 3
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794588723.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 3
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794630519.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 3
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794642030.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 3
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794693197.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 3
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794722423.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 3
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794756147.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = [emotion, null]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = [emotion,null]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion, userEmotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794769398.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = [emotion, null]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = [emotion,null]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion, userEmotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[]x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794771274.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "import Human from 'https://cdn.jsdelivr.net/npm/@vladmandic/human@3.0.5/+esm'\n\nconst humanConfig = {\n  debug: false,\n  modelBasePath: 'https://vladmandic.github.io/human-models/models/',\n  filter: { enabled: true, equalization: false, flip: true },\n  face: {\n    enabled: true,\n    detector: { enabled: false },\n    iris: { enabled: false },\n    description: { enabled: false },\n    emotion: { enabled: true },\n    antispoof: { enabled: false },\n    liveness: { enabled: false }\n  },\n  body: { enabled: false },\n  hand: { enabled: false },\n  object: { enabled: false },\n  gesture: { enabled: false },\n  segmentation: { enabled: false },\n}\n\nasync function useGame(serie=['angry', 'happy']) {\n  let emotion = serie[randint(0,serie.length)]\n  environment.emotion = [emotion, null]\n  await environment.wait()\n  function next(userEmotion) {\n    return match(userEmotion)\n          .with(emotion, _ => {\n            emotion = serie[randint(0,serie.length)]\n            environment.emotion = [emotion,null]\n            return environment.wait()\n          })\n          .otherwise(_ => {\n            environment.emotion = [emotion, userEmotion]\n            return environment.wait()\n          })\n  }\n  return next\n}\n\n\nconst next = await useGame()\n\nconst human = new Human(humanConfig)\ncaptureStream().pipe(\n  throttleTime(1000),\n  concatMap(x => human.detect(x.message)),\n  filter(x => x.face && x.face.length > 0),\n  map(x => x.face[0].emotion[0].emotion),\n  concatMap(emotion => next(emotion))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794773656.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 3
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794962257.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 3
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794969716.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 3
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795031382.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 3
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795117231.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 3
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795356202.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 3
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795404211.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "index": 3
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682833802993.01
          }
        ]
      ],
      "hash": "15a25701934e67b8c9785aea762bbf1cbb60e51f3000bb453a776ea014a9349f"
    },
    "_meta": {
      "lwt": 1682833803004.03
    },
    "_deleted": false,
    "_attachments": {},
    "_rev": "889-exrcyzpgzn"
  },
  {
    "id": "5uVFKnpQHp",
    "type": "header",
    "data": {
      "text": "Your camera",
      "level": 2
    },
    "index": 4,
    "createdBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
    "topic": "e8e141dd-68a7-4c29-af2c-11559f457520",
    "crdts": {
      "operations": [
        [
          {
            "creator": "pkhexmkwbs",
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "id": "5uVFKnpQHp",
                    "type": "header",
                    "data": {
                      "text": "",
                      "level": 2
                    },
                    "index": 4,
                    "createdBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "topic": "e8e141dd-68a7-4c29-af2c-11559f457520"
                  }
                }
              }
            ],
            "time": 1682795092090.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "text": "You",
                      "level": 2
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795094800.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "text": "Your weca",
                      "level": 2
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795104640.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "text": "Your w",
                      "level": 2
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795105697.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "text": "Your camera",
                      "level": 2
                    },
                    "index": 4,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795107017.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 4
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795117246.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 4
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795356266.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 4
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795404231.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "index": 4
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682833803002.01
          }
        ]
      ],
      "hash": "5d1cec8a8e17d24c529476fb3913efe43a3606ccc685b0977dc312fd01b4ba4f"
    },
    "_meta": {
      "lwt": 1682833803004.04
    },
    "_deleted": false,
    "_attachments": {},
    "_rev": "10-exrcyzpgzn"
  },
  {
    "id": "JiMWAwdtr8",
    "type": "code",
    "data": {
      "code": "captureStream().pipe(\n   imshow()\n)",
      "language": "javascript",
      "output": ""
    },
    "index": 5,
    "createdBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
    "topic": "e8e141dd-68a7-4c29-af2c-11559f457520",
    "crdts": {
      "operations": [
        [
          {
            "creator": "pkhexmkwbs",
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "id": "JiMWAwdtr8",
                    "type": "code",
                    "data": {
                      "code": "",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "createdBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "topic": "e8e141dd-68a7-4c29-af2c-11559f457520"
                  }
                }
              }
            ],
            "time": 1682790440101.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "captureStream().pipe(\n  throttleTime(1000),",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790444311.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "captureStream().pipe(\n  throttleTime(1000)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790445862.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "captureStream().pipe(\n  throttleTime(1000),\n  \n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790447595.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "captureStream().pipe(\n   im\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790451603.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "captureStream().pipe(\n   imshow()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 3,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790452845.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 3
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790609604.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 4
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790739479.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 4
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682790878497.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "captureStream().pipe(\n   imshow()\n)",
                      "language": "javascript",
                      "output": "<canvas></canvas>"
                    },
                    "index": 5,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794277561.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "captureStream().pipe(\n   imshow()\n)",
                      "language": "javascript",
                      "output": "<canvas width=\"640\" height=\"480\"></canvas>"
                    },
                    "index": 5,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794278171.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 4
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794463828.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 4
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794475163.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 4
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794582523.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 4
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794588744.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 4
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794630529.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 4
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794642040.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 4
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794693225.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 4
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794722438.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 4
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794756164.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 4
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794962266.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 4
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682794969775.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 4
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795031397.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 5
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795117246.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 5
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795356269.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "index": 5
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795404231.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "captureStream().pipe(\n   imshow()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 5,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795493746.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "index": 5
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682833803002.02
          }
        ]
      ],
      "hash": "7391898576dd116109a97ac1bf909e83f8da5ed43f7545682149c7b3d8b70307"
    },
    "_meta": {
      "lwt": 1682833803004.05
    },
    "_deleted": false,
    "_attachments": {},
    "_rev": "35-exrcyzpgzn"
  },
  {
    "id": "bE-0B2ilhG",
    "type": "code",
    "data": {
      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    console.log(blocks[blocks.length-1])\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
      "language": "javascript",
      "output": ""
    },
    "index": 6,
    "createdBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
    "topic": "e8e141dd-68a7-4c29-af2c-11559f457520",
    "crdts": {
      "operations": [
        [
          {
            "creator": "pkhexmkwbs",
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "id": "bE-0B2ilhG",
                    "type": "code",
                    "data": {
                      "code": "",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "createdBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "topic": "e8e141dd-68a7-4c29-af2c-11559f457520"
                  }
                }
              }
            ],
            "time": 1682795487254.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/1-server-replication.json\",\n    commitMessage: \"Replicate your changes whatever you want\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795511081.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/1-server-replication.json\",\n    commitMessage: \"Replicate your changes whatever you want\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  \n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795514718.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/1-server-replication.json\",\n    commitMessage: \"Replicate your changes whatever you want\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map()\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795516426.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/1-server-replication.json\",\n    commitMessage: \"Replicate your changes whatever you want\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {})\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795519318.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/1-server-replication.json\",\n    commitMessage: \"Replicate your changes whatever you want\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795522985.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/1-server-replication.json\",\n    commitMessage: \"Replicate your changes whatever you want\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    b\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795523990.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/1-server-replication.json\",\n    commitMessage: \"Replicate your changes whatever you want\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    b.\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795524734.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/1-server-replication.json\",\n    commitMessage: \"Replicate your changes whatever you want\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795526996.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-server-replication.json\",\n    commitMessage: \"Replicate your changes whatever you want\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795540298.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-.json\",\n    commitMessage: \"Replicate your changes whatever you want\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795543623.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of.json\",\n    commitMessage: \"Replicate your changes whatever you want\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795547553.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-.json\",\n    commitMessage: \"Replicate your changes whatever you want\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795548106.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Replicate your changes whatever you want\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "fd33e380-054e-4b05-a2f8-11bb382e6d3b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682795549427.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "index": 6
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682833803003.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Replicate your changes whatever you wan\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682833852497.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682833857153.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Game of emotion\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682833863153.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play \",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682833865377.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682833868793.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "\n\n// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682833953593.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "currentUrl.searchParams.has('m')\n\n// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 7,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834036033.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "currentUrl.searchParams.get('m')\n\n// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 7,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834038145.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "currentUrl.searchParams.get('m2')\n\n// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 7,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834039929.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "currentUrl.searchParams.get('m2') === 0\n\n// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 7,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834041377.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "currentUrl.searchParams.get('m2') === \"2\"\n\n// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 7,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834042897.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "if (currentUrl.searchParams.get('m2') === \"2\"\n\n// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 7,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834044569.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "if (currentUrl.searchParams.get('m2') === \"2\") []\n\n// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 7,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834046017.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "if (currentUrl.searchParams.get('m2') === \"2\") {}\n\n// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 7,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834046777.04
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "if (currentUrl.searchParams.get('m2') === \"2\") {\n  \n}\n\n// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 7,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834047265.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "if (currentUrl.searchParams.get('m2') === \"2\") {\n  \"1\"\n}\n\n// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 7,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834058049.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "if (true) {\n  \"1\"\n}\n\n// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 7,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834061393.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "if (true) {\n  return \"1\"\n}\n\n// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">SyntaxError: Illegal return statement</pre>"
                    },
                    "index": 7,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834064609.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">SyntaxError: Illegal return statement</pre>"
                    },
                    "index": 7,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834084561.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "\n\n// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">SyntaxError: Illegal return statement</pre>"
                    },
                    "index": 7,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834086745.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "if (true) {\n  return \"1\"\n}\n\n// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">SyntaxError: Illegal return statement</pre>"
                    },
                    "index": 7,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834087217.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "if (true) {\n  export default \"1\"\n}\n\n// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">SyntaxError: Illegal return statement</pre>"
                    },
                    "index": 7,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834092457.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "if (true) {\n  export default \"1\"\n}\n\n// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 7,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834093777.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "if (true) {\n  export default \"1\"\n}\n\n// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">SyntaxError: Unexpected token 'export'</pre>"
                    },
                    "index": 7,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834094633.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "\n// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">SyntaxError: Unexpected token 'export'</pre>"
                    },
                    "index": 7,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834100113.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": "<pre class=\"py-error\">SyntaxError: Unexpected token 'export'</pre>"
                    },
                    "index": 7,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834101177.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834212977.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    console.log(blocks.)\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834239553.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    console.log(blocks[])\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834241465.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    console.log(blocks[-])\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834242185.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    console.log(blocks[-1])\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834242697.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "// Generate new token on https://github.com/settings/tokens\n// It saves your token locally, so you need not generate new token.\nenvironment.GITHUB_TOKEN = environment.GITHUB_TOKEN || \"REPLACE YOUR TOKEN HERE\"\nawait environment.wait()\n\nconst options = {\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/2-game-of-emotions.json\",\n    commitMessage: \"Play the game of emotions\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n}\n\neditor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    blocks.pop()\n    console.log(blocks[blocks.length-1])\n    return blocks\n  }),\n  map(content =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(content, null, 2).replaceAll(options.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub(options)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 6,
                    "lastEditedBy": "b182da71-1d1a-425c-b1f6-6ed39847e09b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "pkhexmkwbs",
            "time": 1682834255161.01
          }
        ]
      ],
      "hash": "ac3af00b15b6d43423b7e6da364c08fe5081fa2ea68593613df97f67ccb8b1d5"
    },
    "_meta": {
      "lwt": 1682834255162.01
    },
    "_deleted": false,
    "_attachments": {},
    "_rev": "51-exrcyzpgzn"
  }
]
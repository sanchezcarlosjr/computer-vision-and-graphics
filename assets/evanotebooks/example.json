[
  {
    "id": "4SI-DTOlsT",
    "type": "code",
    "data": {
      "code": "function commit(options) {\n  return from(fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  ))\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content:  btoa(unescape(encodeURIComponent(JSON.stringify(options.file, null, 2)))),\n              sha: sha,\n            }),\n          }\n        )\n      )\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
      "language": "javascript",
      "output": ""
    },
    "index": 0,
    "createdBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
    "topic": "aa8a9029-e9dd-4592-a682-82d3b2864cb0",
    "crdts": {
      "operations": [
        [
          {
            "creator": "kipnwkdswc",
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "id": "4SI-DTOlsT",
                    "type": "code",
                    "data": {
                      "code": "",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "createdBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "topic": "aa8a9029-e9dd-4592-a682-82d3b2864cb0"
                  }
                }
              }
            ],
            "time": 1682141927694.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "La conexión entre el navegador y el servidor pienso sería mejor mediante ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141937002.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141937526.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "from",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141938391.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141939796.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "La conexión entre el navegador y el servidor pienso sería mejor mediante ",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141940661.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141941166.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141944700.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe()",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141948854.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  s\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141949841.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  sw\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141950447.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switch\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141950965.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(x)\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141952406.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(\n    x => x.\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141954696.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(\n    x => x.map\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141955789.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(\n    x => x\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141958590.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(\n    x => x.\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141959089.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(\n    x => x\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141959573.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(\n    x => x.\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141971593.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(\n    x => x.blocks.\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141977774.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(\n    x => x.blocks.find()\n  )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141979022.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(\n    x => x.blocks.find()\n  ),\n  \n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141980589.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(\n    x => x.blocks.find().\n  ),\n  \n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141982453.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(\n    x => x.blocks.find().$\n  ),\n  \n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141983286.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(\n    x => x.blocks.find(aa8a9029-e9dd-4592-a682-82d3b2864cb0).$\n  ),\n  \n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682141999818.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(\n    x => x.blocks.find(\"aa8a9029-e9dd-4592-a682-82d3b2864cb0\").$\n  ),\n  \n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142000955.03
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(\n    x => x.blocks.find(\"aa8a9029-e9dd-4592-a682-82d3b2864cb0\").$\n  ),\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142011772.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(\n    x => x.blocks.find(\"aa8a9029-e9dd-4592-a682-82d3b2864cb0\").$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142012949.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(\n    x => x.blocks.find(\"aa8a9029-e9dd-4592-a682-82d3b2864cb0\").$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": "Error: RxError (COL5):\nRxDB Error-Code COL5.\n        Error messages are not included in RxDB core to reduce build size.\n        - To find out what this error means, either use the dev-mode-plugin https://rxdb.info/dev-mode.html\n        - or search for the error code here: https://github.com/pubkey/rxdb/search?q=COL5\n        \nGiven parameters: {\nqueryObj:\"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"}\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142015934.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(\n    x => x.blocks.find(\"x\").$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": "Error: RxError (COL5):\nRxDB Error-Code COL5.\n        Error messages are not included in RxDB core to reduce build size.\n        - To find out what this error means, either use the dev-mode-plugin https://rxdb.info/dev-mode.html\n        - or search for the error code here: https://github.com/pubkey/rxdb/search?q=COL5\n        \nGiven parameters: {\nqueryObj:\"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"}\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142033478.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(\n    x => x.blocks.find(\"\").$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": "Error: RxError (COL5):\nRxDB Error-Code COL5.\n        Error messages are not included in RxDB core to reduce build size.\n        - To find out what this error means, either use the dev-mode-plugin https://rxdb.info/dev-mode.html\n        - or search for the error code here: https://github.com/pubkey/rxdb/search?q=COL5\n        \nGiven parameters: {\nqueryObj:\"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"}\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142035192.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        age: {\n          $gt: 18\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": "Error: RxError (COL5):\nRxDB Error-Code COL5.\n        Error messages are not included in RxDB core to reduce build size.\n        - To find out what this error means, either use the dev-mode-plugin https://rxdb.info/dev-mode.html\n        - or search for the error code here: https://github.com/pubkey/rxdb/search?q=COL5\n        \nGiven parameters: {\nqueryObj:\"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"}\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142083863.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        : {\n          $eq: 18\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": "Error: RxError (COL5):\nRxDB Error-Code COL5.\n        Error messages are not included in RxDB core to reduce build size.\n        - To find out what this error means, either use the dev-mode-plugin https://rxdb.info/dev-mode.html\n        - or search for the error code here: https://github.com/pubkey/rxdb/search?q=COL5\n        \nGiven parameters: {\nqueryObj:\"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"}\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142089455.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: 18\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": "Error: RxError (COL5):\nRxDB Error-Code COL5.\n        Error messages are not included in RxDB core to reduce build size.\n        - To find out what this error means, either use the dev-mode-plugin https://rxdb.info/dev-mode.html\n        - or search for the error code here: https://github.com/pubkey/rxdb/search?q=COL5\n        \nGiven parameters: {\nqueryObj:\"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"}\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142090813.06
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": "Error: RxError (COL5):\nRxDB Error-Code COL5.\n        Error messages are not included in RxDB core to reduce build size.\n        - To find out what this error means, either use the dev-mode-plugin https://rxdb.info/dev-mode.html\n        - or search for the error code here: https://github.com/pubkey/rxdb/search?q=COL5\n        \nGiven parameters: {\nqueryObj:\"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"}\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142099486.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "db.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142099949.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "index": 0
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142134108.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "\ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142628971.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json();\n          return { sha: data.sha };\n        } else if (response.status === 404) {\n          return { sha: null };\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\");\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      catchError((error) => {\n        console.error(\"Error al crear el commit:\", error);\n        return error;\n      }),\n      map(async (commitResponse) => {\n        const commitData = await commitResponse.json();\n        console.log(\"Commit creado exitosamente:\", commitData.commit.html_url);\n      })\n    )\n    .subscribe();\n}\n\n// Uso de la función commit\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commit\",\n  GITHUB_TOKEN: \"tu_token_de_acceso_personal\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n});\n\nReemplaza tu_token_de_acceso_personal con tu token de acceso personal de GitHub y ajusta las opciones según tus necesidades.\n\nLa función commit ahora toma un objeto de opciones que incluye todas las propiedades necesarias y utiliza la función fromFetch de RxJS para realizar las solicitudes a la API de GitHub. Los operadores switchMap, catchError, y map procesan las respuestas y realizan la secuencia de solicitudes.\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142632441.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json();\n          return { sha: data.sha };\n        } else if (response.status === 404) {\n          return { sha: null };\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\");\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      catchError((error) => {\n        console.error(\"Error al crear el commit:\", error);\n        return error;\n      }),\n      map(async (commitResponse) => {\n        const commitData = await commitResponse.json();\n        console.log(\"Commit creado exitosamente:\", commitData.commit.html_url);\n      })\n    )\n    .subscribe();\n}\n\n// Uso de la función commit\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commit\",\n  GITHUB_TOKEN: \"tu_token_de_acceso_personal\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n});\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142635782.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json();\n          return { sha: data.sha };\n        } else if (response.status === 404) {\n          return { sha: null };\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\");\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      catchError((error) => {\n        console.error(\"Error al crear el commit:\", error);\n        return error;\n      }),\n      map(async (commitResponse) => {\n        const commitData = await commitResponse.json();\n        console.log(\"Commit creado exitosamente:\", commitData.commit.html_url);\n      })\n    )\n}\n\n// Uso de la función commit\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commit\",\n  GITHUB_TOKEN: \"tu_token_de_acceso_personal\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n});\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142643043.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json();\n          return { sha: data.sha };\n        } else if (response.status === 404) {\n          return { sha: null };\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\");\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      catchError((error) => {\n        console.error(\"Error al crear el commit:\", error);\n        return error;\n      }),\n      map(async (commitResponse) => {\n        const commitData = await commitResponse.json()\n      })\n    )\n}\n\n// Uso de la función commit\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commit\",\n  GITHUB_TOKEN: \"tu_token_de_acceso_personal\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n});\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142647849.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json();\n          return { sha: data.sha };\n        } else if (response.status === 404) {\n          return { sha: null };\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\");\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      catchError((error) => {\n        console.error(\"Error al crear el commit:\", error);\n        return error;\n      }),\n      map(async (commitResponse) => {\n       await commitResponse.json()\n      })\n    )\n}\n\n// Uso de la función commit\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commit\",\n  GITHUB_TOKEN: \"tu_token_de_acceso_personal\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n});\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142650887.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json();\n          return { sha: data.sha };\n        } else if (response.status === 404) {\n          return { sha: null };\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\");\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      catchError((error) => {\n        console.error(\"Error al crear el commit:\", error);\n        return error;\n      }),\n      map(async (commitResponse) => {\n         commitResponse.json()\n      })\n    )\n}\n\n// Uso de la función commit\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commit\",\n  GITHUB_TOKEN: \"tu_token_de_acceso_personal\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n});\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142654774.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json();\n          return { sha: data.sha };\n        } else if (response.status === 404) {\n          return { sha: null };\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\");\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      catchError((error) => {\n        console.error(\"Error al crear el commit:\", error);\n        return error;\n      }),\n      map( (commitResponse) => {\n         commitResponse.json()\n      })\n    )\n}\n\n// Uso de la función commit\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commit\",\n  GITHUB_TOKEN: \"tu_token_de_acceso_personal\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n});\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142656083.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json();\n          return { sha: data.sha };\n        } else if (response.status === 404) {\n          return { sha: null };\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\");\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      catchError((error) => {\n        console.error(\"Error al crear el commit:\", error);\n        return error;\n      }),\n      map((commitResponse) => {\n         commitResponse.json()\n      })\n    )\n}\n\n// Uso de la función commit\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commit\",\n  GITHUB_TOKEN: \"tu_token_de_acceso_personal\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n});\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142656573.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json();\n          return { sha: data.sha };\n        } else if (response.status === 404) {\n          return { sha: null };\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\");\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      catchError((error) => {\n        console.error(\"Error al crear el commit:\", error);\n        return error;\n      }),\n      switchMap((commitResponse) => {\n         commitResponse.json()\n      })\n    )\n}\n\n// Uso de la función commit\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commit\",\n  GITHUB_TOKEN: \"tu_token_de_acceso_personal\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n});\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142660305.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json();\n          return { sha: data.sha };\n        } else if (response.status === 404) {\n          return { sha: null };\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\");\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      catchError((error) => {\n        console.error(\"Error al crear el commit:\", error);\n        return error;\n      }),\n      switchMap((commitResponse) => {\n         commitResponse.json()\n      })\n    )\n}\n\n// Uso de la función commit\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commit\",\n  GITHUB_TOKEN: \"tu_token_de_acceso_personal\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n});\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142663733.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha };\n        } else if (response.status === 404) \n          return { sha: null };\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\");\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      catchError((error) => {\n        console.error(\"Error al crear el commit:\", error);\n        return error;\n      }),\n      switchMap((commitResponse) => {\n         commitResponse.json()\n      })\n    )\n}\n\n// Uso de la función commit\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commit\",\n  GITHUB_TOKEN: \"tu_token_de_acceso_personal\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n});\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142671816.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null };\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\");\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      catchError((error) => {\n        console.error(\"Error al crear el commit:\", error);\n        return error;\n      }),\n      switchMap((commitResponse) => {\n         commitResponse.json()\n      })\n    )\n}\n\n// Uso de la función commit\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commit\",\n  GITHUB_TOKEN: \"tu_token_de_acceso_personal\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n});\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142673568.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      catchError((error) => {\n        console.error(\"Error al crear el commit:\", error);\n        return error;\n      }),\n      switchMap((commitResponse) => {\n         commitResponse.json()\n      })\n    )\n}\n\n// Uso de la función commit\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commit\",\n  GITHUB_TOKEN: \"tu_token_de_acceso_personal\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n});\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142677485.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      catchError((error) => {\n        console.error(\"Error al crear el commit:\", error);\n        return error\n      }),\n      switchMap((commitResponse) => {\n         commitResponse.json()\n      })\n    )\n}\n\n// Uso de la función commit\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commit\",\n  GITHUB_TOKEN: \"tu_token_de_acceso_personal\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n});\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142683423.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      catchError((error) => {\n        return error\n      }),\n      switchMap((commitResponse) => {\n         commitResponse.json()\n      })\n    )\n}\n\n// Uso de la función commit\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commit\",\n  GITHUB_TOKEN: \"tu_token_de_acceso_personal\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n});\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142686328.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => {\n         commitResponse.json()\n      })\n    )\n}\n\n// Uso de la función commit\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commit\",\n  GITHUB_TOKEN: \"tu_token_de_acceso_personal\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n});\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142689874.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => \n         commitResponse.json()\n      })\n    )\n}\n\n// Uso de la función commit\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commit\",\n  GITHUB_TOKEN: \"tu_token_de_acceso_personal\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n});\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142693420.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => \n         commitResponse.json()\n      )\n    )\n}\n\n// Uso de la función commit\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commit\",\n  GITHUB_TOKEN: \"tu_token_de_acceso_personal\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n});\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142694498.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json()\n      )\n    )\n}\n\n// Uso de la función commit\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commit\",\n  GITHUB_TOKEN: \"tu_token_de_acceso_personal\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n});\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142695778.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n\n// Uso de la función commit\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commit\",\n  GITHUB_TOKEN: \"tu_token_de_acceso_personal\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n});\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142698145.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n\n// Uso de la función commit\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commit\",\n  GITHUB_TOKEN: \"tu_token_de_acceso_personal\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n})\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142723287.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n\n\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commit\",\n  GITHUB_TOKEN: \"tu_token_de_acceso_personal\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n})\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142766825.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n\n\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commit\",\n  GITHUB_TOKEN: \"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\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n})\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682147915571.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n\n\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Mensaje del commi\",\n  GITHUB_TOKEN: \"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\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n})\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682147919022.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n\n\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Created a real \",\n  GITHUB_TOKEN: \"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\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n})\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682147923612.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n\n\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Created a real\",\n  GITHUB_TOKEN: \"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\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n})\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682147925283.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n\n\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"\",\n  GITHUB_TOKEN: \"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\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n})\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682147926173.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n\n\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Write a \",\n  GITHUB_TOKEN: \"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\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n})\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682147927852.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n\n\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Write a notebook from filepat\",\n  GITHUB_TOKEN: \"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\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n})\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682147936156.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n\n\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Write a notebook from filepa\",\n  GITHUB_TOKEN: \"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\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n})\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682147938065.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n\n\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Write a notebook\",\n  GITHUB_TOKEN: \"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\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n})\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682147939377.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n\n\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"nombre_del_archivo.json\",\n  commitMessage: \"Write an example notebook\",\n  GITHUB_TOKEN: \"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\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n})\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682147942265.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n\n\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \".json\",\n  commitMessage: \"Write an example notebook\",\n  GITHUB_TOKEN: \"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\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n})\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682147950219.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n\n\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"assets/evanotebooks.json\",\n  commitMessage: \"Write an example notebook\",\n  GITHUB_TOKEN: \"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\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n})\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682147986306.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n\n\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"assets/evanotebooks/.json\",\n  commitMessage: \"Write an example notebook\",\n  GITHUB_TOKEN: \"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\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n})\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682147987402.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n\n\ncommit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"assets/evanotebooks/example.json\",\n  commitMessage: \"Write an example notebook\",\n  GITHUB_TOKEN: \"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\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n})\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682147990598.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n\n\n\n\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148004633.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148006636.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap()\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148011195.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(x => )\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148013123.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(x => commit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"assets/evanotebooks/example.json\",\n  commitMessage: \"Write an example notebook\",\n  GITHUB_TOKEN: \"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\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n}))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148014509.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"assets/evanotebooks/example.json\",\n  commitMessage: \"Write an example notebook\",\n  GITHUB_TOKEN: \"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\",\n  file: {\n    clave1: \"valor1\",\n    clave2: \"valor2\",\n  },\n}))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148020631.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"assets/evanotebooks/example.json\",\n  commitMessage: \"Write an example notebook\",\n  GITHUB_TOKEN: \"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\",\n  file\n  }))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148026936.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"assets/evanotebooks/example.json\",\n  commitMessage: \"Write an example notebook\",\n  GITHUB_TOKEN: \"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\",\n    file\n  }))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148033303.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n  filePath: \"assets/evanotebooks/example.json\",\n  commitMessage: \"Write an example notebook\",\n     GITHUB_TOKEN: \"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\",\n    file\n  }))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148034366.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n  owner: \"sanchezcarlosjr\",\n  repo: \"notebooks-db\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  }))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148037761.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n  owner: \"sanchezcarlosjr\",\n    repo: \"notebooks-db\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  }))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148039092.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"notebooks-db\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  }))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148040149.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  }))\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148054431.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148058435.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": "Error: Error al obtener la referencia del archivo.\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148059984.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148097563.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": "Error: Error al obtener la referencia del archivo.\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148098890.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        \n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": "Error: Error al obtener la referencia del archivo.\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148144802.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        console.log(response)\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": "Error: Error al obtener la referencia del archivo.\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148148339.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        console.log(response)\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148159056.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromFetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        console.log(response)\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": "Error: Error al obtener la referencia del archivo.\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148160211.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        console.log(response)\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": "Error: Error al obtener la referencia del archivo.\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148170425.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return fromfetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        console.log(response)\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": "Error: Error al obtener la referencia del archivo.\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148171778.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return from(fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  )\n    .pipe(\n      switchMap(async (response) => {\n        console.log(response)\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": "Error: Error al obtener la referencia del archivo.\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148173121.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return from(fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  ))\n    .pipe(\n      switchMap(async (response) => {\n        console.log(response)\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": "Error: Error al obtener la referencia del archivo.\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148174836.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return from(fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  ))\n    .pipe(\n      switchMap(async (response) => {\n        console.log(response)\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148179293.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return from(fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  ))\n    .pipe(\n      switchMap(async (response) => {\n        console.log(response)\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": "ReferenceError: Buffer is not defined\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148180723.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return from(fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  ))\n    .pipe(\n      switchMap(async (response) => {\n\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": "ReferenceError: Buffer is not defined\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148187152.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return from(fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  ))\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from(JSON.stringify(options.file, null, 2)).toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": "ReferenceError: Buffer is not defined\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148187742.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return from(fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  ))\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: Buffer.from().toString(\"base64\"),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": "ReferenceError: Buffer is not defined\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148211891.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return from(fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  ))\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: JSON.stringify(options.file, null, 2),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": "ReferenceError: Buffer is not defined\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148214268.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return from(fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  ))\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: JSON.stringify(options.file, null,),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": "ReferenceError: Buffer is not defined\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148215953.02
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return from(fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  ))\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: JSON.stringify(options.file, null),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": "ReferenceError: Buffer is not defined\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148216455.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return from(fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  ))\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: JSON.stringify(options.file, null,),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": "ReferenceError: Buffer is not defined\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148219567.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return from(fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  ))\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: JSON.stringify(options.file, null, 2),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": "ReferenceError: Buffer is not defined\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148220038.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return from(fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  ))\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: JSON.stringify(options.file, null, 2),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148221066.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return from(fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  ))\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: JSON.stringify(options.file, null, 2),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n      switchMap((commitResponse) => commitResponse.json())\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": "TypeError: commitResponse.json is not a function\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148222904.05
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return from(fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  ))\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: JSON.stringify(options.file, null, 2),\n              sha: sha,\n            }),\n          }\n        )\n      ),\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": "TypeError: commitResponse.json is not a function\n"
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148235386.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return from(fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  ))\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: JSON.stringify(options.file, null, 2),\n              sha: sha,\n            }),\n          }\n        )\n      )\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148236232.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return from(fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  ))\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: JSON.stringify(options.file, null, 2).,\n              sha: sha,\n            }),\n          }\n        )\n      )\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148248740.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return from(fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  ))\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content: JSON.stringify(options.file, null, 2),\n              sha: sha,\n            }),\n          }\n        )\n      )\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148249812.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return from(fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  ))\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content:  btoa(unescape(encodeURIComponent(JSON.stringify(options.file, null, 2),\n              sha: sha,\n            }),\n          }\n        )\n      )\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148313137.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return from(fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  ))\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content:  btoa(unescape(encodeURIComponent(JSON.stringify(options.file, null, 2)),\n              sha: sha,\n            }),\n          }\n        )\n      )\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148314846.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return from(fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  ))\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content:  btoa(unescape(encodeURIComponent(JSON.stringify(options.file, null, 2))),\n              sha: sha,\n            }),\n          }\n        )\n      )\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148316190.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "data": {
                      "code": "function commit(options) {\n  return from(fetch(\n    `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n    {\n      headers: {\n        Authorization: `token ${options.GITHUB_TOKEN}`,\n        Accept: \"application/vnd.github+json\",\n      },\n    }\n  ))\n    .pipe(\n      switchMap(async (response) => {\n        if (response.ok) {\n          const data = await response.json()\n          return { sha: data.sha }\n        } else if (response.status === 404) {\n          return { sha: null }\n        } else {\n          throw new Error(\"Error al obtener la referencia del archivo.\")\n        }\n      }),\n      switchMap(({ sha }) =>\n        fromFetch(\n          `https://api.github.com/repos/${options.owner}/${options.repo}/contents/${options.filePath}`,\n          {\n            headers: {\n              Authorization: `token ${options.GITHUB_TOKEN}`,\n              Accept: \"application/vnd.github+json\",\n            },\n            method: \"PUT\",\n            body: JSON.stringify({\n              message: options.commitMessage,\n              content:  btoa(unescape(encodeURIComponent(JSON.stringify(options.file, null, 2)))),\n              sha: sha,\n            }),\n          }\n        )\n      )\n    )\n}\n  \ndb.pipe(\n  switchMap(\n    x => x.blocks.find({\n      selector: {\n        topic: {\n          $eq: \"aa8a9029-e9dd-4592-a682-82d3b2864cb0\"\n        }\n      }\n    }).$\n  ),\n  switchMap(file => commit({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/example.json\",\n    commitMessage: \"Write an example notebook\",\n    GITHUB_TOKEN: \"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\",\n    file\n  })),\n  log\n)",
                      "language": "javascript",
                      "output": ""
                    },
                    "index": 0,
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "_deleted": false
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682148316765.01
          }
        ]
      ],
      "hash": "5f2bbb71c67c21a7ff95eb5f2b04e7ad20e2ba7bfab6e1a9cd5c44afc9e2b963"
    },
    "_meta": {
      "lwt": 1682148316766.01
    },
    "_deleted": false,
    "_attachments": {},
    "_rev": "120-eywxgshqbu"
  },
  {
    "id": "kcZ1ShMNql",
    "type": "paragraph",
    "data": {
      "text": ""
    },
    "index": 1,
    "createdBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
    "topic": "aa8a9029-e9dd-4592-a682-82d3b2864cb0",
    "crdts": {
      "operations": [
        [
          {
            "creator": "kipnwkdswc",
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "id": "kcZ1ShMNql",
                    "type": "paragraph",
                    "data": {
                      "text": ""
                    },
                    "index": 0,
                    "createdBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "topic": "aa8a9029-e9dd-4592-a682-82d3b2864cb0"
                  }
                }
              }
            ],
            "time": 1682141917442.01
          }
        ],
        [
          {
            "body": [
              {
                "ifMatch": {
                  "$set": {
                    "lastEditedBy": "724d4b02-f810-45ff-b7ff-ad6f7286c19b",
                    "index": 1
                  }
                }
              }
            ],
            "creator": "kipnwkdswc",
            "time": 1682142134210.01
          }
        ]
      ],
      "hash": "fa65616ca68a3eaab83e449a4b1dffbddc6ac21f08ebe87a2f814af2bebe401a"
    },
    "_meta": {
      "lwt": 1682142134212.01
    },
    "_deleted": false,
    "_attachments": {},
    "_rev": "3-eywxgshqbu"
  }
]
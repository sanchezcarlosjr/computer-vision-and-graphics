[
  {
    "id": "cihXe4D3Op",
    "type": "header",
    "data": {
      "text": "Procrustes Analysis",
      "level": 1
    },
    "index": 0,
    "createdBy": "cgflsjntse",
    "lastEditedBy": "cgflsjntse",
    "topic": "wfhpfmczdk"
  },
  {
    "id": "Ua30gSiVEo",
    "type": "code",
    "data": {
      "code": "import numpy as np\nfrom scipy.linalg import orthogonal_procrustes\nimport matplotlib.pyplot as plt\n\ndef translation_matrix_3d(dx, dy):\n    return np.array([\n        [1, 0, dx],\n        [0, 1, dy],\n        [0, 0, 0],\n    ])\n\ndef rotation_matrix(angle_rad):\n    cos_angle = np.cos(angle_rad)\n    sin_angle = np.sin(angle_rad)\n    return np.array([[cos_angle, -sin_angle], [sin_angle, cos_angle]])\n\ndef scaling_matrix_3d(sx, sy):\n    return np.array([0\n        [sx, 0],\n        [0, sy]\n    ])\n\ndef min_max_normalization(data):\n    return (data - np.min(data)) / (np.max(data) - np.min(data))\n\n# https://en.wikipedia.org/wiki/Procrustes_analysis\ndef compute_procrustes_similarity(shape1, shape2):\n  procrustes_distance = np.sqrt(((shape2 - shape1)**2).sum())\n  return max(1-round(procrustes_distance,4),0)\n\ndef compute_procrustes(shape1, shape2):\n    shape1 = shape1.astype(float)\n    shape2 = shape2.astype(float)\n    R, scale = orthogonal_procrustes(shape1, shape2)\n    transformed_shape1 = scale * shape1.dot(R)\n    return compute_procrustes_similarity(shape2,transformed_shape1)\n\ndef standard_normalization(shape):\n    shape = shape.astype(float)\n    # centering the shape\n    shape -= np.mean(shape, axis=0)\n    # scale the shape\n    shape /= np.sqrt((shape**2).sum())\n    return shape",
      "language": "python",
      "output": "undefined"
    },
    "index": 1,
    "createdBy": "sbxpricfei",
    "lastEditedBy": "cgflsjntse",
    "topic": "wfhpfmczdk"
  },
  {
    "id": "UlFC_IkGR-",
    "type": "code",
    "data": {
      "code": "goal_gestures = [\n  # Good hands\n  np.array([\n    [\n        -0.04437179118394852,\n        0.06013166159391403\n    ],\n    [\n        -0.030373822897672653,\n        0.024594536051154137\n    ],\n    [\n        -0.01407318003475666,\n        0.003410744946449995\n    ],\n    [\n        0.001324000651948154,\n        -0.006110751535743475\n    ],\n    [\n        0.014575107023119926,\n        -0.00674854964017868\n    ],\n    [\n        -0.00938907265663147,\n        -0.015193025581538677\n    ],\n    [\n        0.01875539869070053,\n        -0.015913622453808784\n    ],\n    [\n        0.030945394188165665,\n        -0.013424413278698921\n    ],\n    [\n        0.02498702146112919,\n        -0.004565436393022537\n    ],\n    [\n        -0.0033411637414246798,\n        -0.003406864358112216\n    ],\n    [\n        0.026640258729457855,\n        -0.008729360066354275\n    ],\n    [\n        0.03487083315849304,\n        0.0013842377811670303\n    ],\n    [\n        0.0249088853597641,\n        0.005138865672051907\n    ],\n    [\n        0.0051623377948999405,\n        0.007705852389335632\n    ],\n    [\n        0.032213322818279266,\n        0.0038638440892100334\n    ],\n    [\n        0.03945596143603325,\n        0.011287334375083447\n    ],\n    [\n        0.03329009562730789,\n        0.01730116829276085\n    ],\n    [\n        0.007450970821082592,\n        0.02698848769068718\n    ],\n    [\n        0.030103573575615883,\n        0.0167562123388052\n    ],\n    [\n        0.043349843472242355,\n        0.014750720001757145\n    ],\n    [\n        0.0451187938451767,\n        0.02069074846804142\n    ]\n]),\n  np.array([\n    [\n        -0.00743117043748498,\n        0.08312616497278214\n    ],\n    [\n        -0.02322242222726345,\n        0.06883387267589569\n    ],\n    [\n        -0.03724820166826248,\n        0.04268737509846687\n    ],\n    [\n        -0.04983661696314812,\n        0.020470764487981796\n    ],\n    [\n        -0.044040046632289886,\n        0.014278552494943142\n    ],\n    [\n        -0.006613157689571381,\n        0.006508741062134504\n    ],\n    [\n        -0.023695340380072594,\n        -0.008382532745599747\n    ],\n    [\n        -0.03515935316681862,\n        0.00023108453024178743\n    ],\n    [\n        -0.039246316999197006,\n        0.014806391671299934\n    ],\n    [\n        0.001727722818031907,\n        -0.0011210497468709946\n    ],\n    [\n        -0.02149529941380024,\n        -0.0195025447756052\n    ],\n    [\n        -0.039598867297172546,\n        -0.0005420322995632887\n    ],\n    [\n        -0.03258579596877098,\n        0.014788605272769928\n    ],\n    [\n        0.004106654319912195,\n        -0.0075768474489450455\n    ],\n    [\n        -0.022001810371875763,\n        -0.018346183001995087\n    ],\n    [\n        -0.03690217062830925,\n        -0.0045980727300047874\n    ],\n    [\n        -0.02732686698436737,\n        0.011243991553783417\n    ],\n    [\n        -0.001713516190648079,\n        -0.0021492710802704096\n    ],\n    [\n        -0.02172132208943367,\n        -0.015533922240138054\n    ],\n    [\n        -0.04009399935603142,\n        -0.015088725835084915\n    ],\n    [\n        -0.035079702734947205,\n        0.003600718453526497\n    ]\n]),\n  np.array([\n    [\n        -0.011752473190426826,\n        0.07981489598751068\n    ],\n    [\n        -0.014785823412239552,\n        0.05764074623584747\n    ],\n    [\n        -0.022826792672276497,\n        0.03760743513703346\n    ],\n    [\n        -0.03811827301979065,\n        0.018972093239426613\n    ],\n    [\n        -0.045793212950229645,\n        0.009367093443870544\n    ],\n    [\n        0.001445339061319828,\n        -0.002166037680581212\n    ],\n    [\n        -0.020204560831189156,\n        -0.008779816329479218\n    ],\n    [\n        -0.03222270309925079,\n        0.00008126674219965935\n    ],\n    [\n        -0.03455467149615288,\n        0.0175905954092741\n    ],\n    [\n        0.002647638553753495,\n        -0.0022845622152090073\n    ],\n    [\n        -0.022240551188588142,\n        -0.01622854918241501\n    ],\n    [\n        -0.04138747230172157,\n        0.00047575123608112335\n    ],\n    [\n        -0.0334768071770668,\n        0.01482483372092247\n    ],\n    [\n        -0.00277976063080132,\n        -0.0013980427756905556\n    ],\n    [\n        -0.029899047687649727,\n        -0.006947678048163652\n    ],\n    [\n        -0.04592476040124893,\n        0.006158621050417423\n    ],\n    [\n        -0.03497215732932091,\n        0.018848907202482224\n    ],\n    [\n        -0.015756674110889435,\n        0.012213284149765968\n    ],\n    [\n        -0.03318582475185394,\n        0.005383781157433987\n    ],\n    [\n        -0.047945886850357056,\n        0.010215861722826958\n    ],\n    [\n        -0.043104950338602066,\n        0.024554669857025146\n    ]\n]),\n  np.array([\n    [\n        -0.011245526373386383,\n        0.09132134169340134\n    ],\n    [\n        -0.03133370354771614,\n        0.0701267421245575\n    ],\n    [\n        -0.036925192922353745,\n        0.045592017471790314\n    ],\n    [\n        -0.03625767305493355,\n        0.02127552404999733\n    ],\n    [\n        -0.02641802839934826,\n        0.005037011578679085\n    ],\n    [\n        -0.018495304509997368,\n        0.005289589054882526\n    ],\n    [\n        -0.024068236351013184,\n        -0.014961158856749535\n    ],\n    [\n        -0.03634393960237503,\n        -0.004901657812297344\n    ],\n    [\n        -0.041996873915195465,\n        0.021142898127436638\n    ],\n    [\n        -0.0013069615233689547,\n        -0.0011953187640756369\n    ],\n    [\n        -0.012764962390065193,\n        -0.030648013576865196\n    ],\n    [\n        -0.03327251598238945,\n        -0.008530526421964169\n    ],\n    [\n        -0.03132154047489166,\n        0.012581931427121162\n    ],\n    [\n        0.011504814960062504,\n        -0.006086939945816994\n    ],\n    [\n        -0.0002332834410481155,\n        -0.029082486405968666\n    ],\n    [\n        -0.017688095569610596,\n        -0.010830182582139969\n    ],\n    [\n        -0.01721525564789772,\n        0.011794669553637505\n    ],\n    [\n        0.014770193956792355,\n        0.004549873527139425\n    ],\n    [\n        0.017094239592552185,\n        -0.021025456488132477\n    ],\n    [\n        0.001362937386147678,\n        -0.020891008898615837\n    ],\n    [\n        -0.006220262497663498,\n        -0.0014976339880377054\n    ]\n]),\n  np.array([\n    [\n        0.009984806180000305,\n        0.07296958565711975\n    ],\n    [\n        0.002811427228152752,\n        0.04166361689567566\n    ],\n    [\n        0.00046398944687098265,\n        0.01828944683074951\n    ],\n    [\n        -0.010539124719798565,\n        0.0016434227582067251\n    ],\n    [\n        -0.019866349175572395,\n        -0.006995959207415581\n    ],\n    [\n        0.0008313457947224379,\n        -0.008055153302848339\n    ],\n    [\n        -0.02386176586151123,\n        -0.012779663316905499\n    ],\n    [\n        -0.03559102490544319,\n        -0.009142636321485043\n    ],\n    [\n        -0.037140458822250366,\n        0.003042487893253565\n    ],\n    [\n        0.0003279192023910582,\n        -0.0028941838536411524\n    ],\n    [\n        -0.025400113314390182,\n        -0.010004360228776932\n    ],\n    [\n        -0.03954297676682472,\n        0.0047503188252449036\n    ],\n    [\n        -0.03544996678829193,\n        0.012771590612828732\n    ],\n    [\n        -0.0016193641349673271,\n        0.004055445082485676\n    ],\n    [\n        -0.0274491049349308,\n        0.0023583141155540943\n    ],\n    [\n        -0.039635974913835526,\n        0.011281168088316917\n    ],\n    [\n        -0.032541435211896896,\n        0.021053045988082886\n    ],\n    [\n        -0.009919270873069763,\n        0.02248293347656727\n    ],\n    [\n        -0.029085276648402214,\n        0.016729945316910744\n    ],\n    [\n        -0.040733713656663895,\n        0.019243279471993446\n    ],\n    [\n        -0.037474747747182846,\n        0.028157662600278854\n    ]\n]),\n  np.array([\n    [\n        -0.01481598149985075,\n        0.08564911037683487\n    ],\n    [\n        -0.03190986439585686,\n        0.05512534826993942\n    ],\n    [\n        -0.04306451976299286,\n        0.03246694803237915\n    ],\n    [\n        -0.06253784149885178,\n        0.009875074960291386\n    ],\n    [\n        -0.07533533871173859,\n        -0.006084863096475601\n    ],\n    [\n        -0.01078721322119236,\n        -0.006240516435354948\n    ],\n    [\n        -0.028212672099471092,\n        -0.02317647449672222\n    ],\n    [\n        -0.04634038358926773,\n        -0.022121302783489227\n    ],\n    [\n        -0.05693067982792854,\n        -0.007697101682424545\n    ],\n    [\n        0.0015850262716412544,\n        -0.0038971046451479197\n    ],\n    [\n        -0.023257672786712646,\n        -0.023224610835313797\n    ],\n    [\n        -0.04170620068907738,\n        -0.008240927942097187\n    ],\n    [\n        -0.03740106150507927,\n        0.008669584058225155\n    ],\n    [\n        0.006394358351826668,\n        0.0034554828889667988\n    ],\n    [\n        -0.01962079480290413,\n        -0.01138157770037651\n    ],\n    [\n        -0.03536926582455635,\n        0.0015906107146292925\n    ],\n    [\n        -0.02941059321165085,\n        0.016875850036740303\n    ],\n    [\n        0.0016519965138286352,\n        0.019232334569096565\n    ],\n    [\n        -0.022819306701421738,\n        0.00971619039773941\n    ],\n    [\n        -0.041112471371889114,\n        0.012565318495035172\n    ],\n    [\n        -0.03387237712740898,\n        0.026841778308153152\n    ]\n]),\n  np.array([\n    [\n        0.016184907406568527,\n        0.05936076492071152\n    ],\n    [\n        -0.00691937655210495,\n        0.05461214482784271\n    ],\n    [\n        -0.02531386911869049,\n        0.039840202778577805\n    ],\n    [\n        -0.04718567803502083,\n        0.022673040628433228\n    ],\n    [\n        -0.055090006440877914,\n        0.007203729823231697\n    ],\n    [\n        -0.01064959354698658,\n        0.01838342472910881\n    ],\n    [\n        -0.02175397053360939,\n        0.0074090855196118355\n    ],\n    [\n        -0.026158282533288002,\n        0.015091332606971264\n    ],\n    [\n        -0.021073173731565475,\n        0.028496714308857918\n    ],\n    [\n        -0.0006832581711933017,\n        0.002860692795366049\n    ],\n    [\n        -0.02104298770427704,\n        -0.008388573303818703\n    ],\n    [\n        -0.027914654463529587,\n        0.010211899876594543\n    ],\n    [\n        -0.016777243465185165,\n        0.024583397433161736\n    ],\n    [\n        0.007019475102424622,\n        -0.013251502066850662\n    ],\n    [\n        -0.014873921871185303,\n        -0.018180523067712784\n    ],\n    [\n        -0.018831072375178337,\n        -0.003523488063365221\n    ],\n    [\n        -0.005406093318015337,\n        0.01385131012648344\n    ],\n    [\n        0.01074599102139473,\n        -0.018367502838373184\n    ],\n    [\n        -0.004457254894077778,\n        -0.03549741581082344\n    ],\n    [\n        -0.019197707995772362,\n        -0.029366301372647285\n    ],\n    [\n        -0.016656968742609024,\n        -0.01069048885256052\n    ]\n]),\n  np.array([\n    [\n        -0.0044112554751336575,\n        0.08852279931306839\n    ],\n    [\n        -0.021480344235897064,\n        0.06783101707696915\n    ],\n    [\n        -0.03375563770532608,\n        0.045627910643815994\n    ],\n    [\n        -0.05040803551673889,\n        0.027637941762804985\n    ],\n    [\n        -0.05870562046766281,\n        0.013475680723786354\n    ],\n    [\n        -0.006436792202293873,\n        -0.001922511262819171\n    ],\n    [\n        -0.025336524471640587,\n        -0.015042533166706562\n    ],\n    [\n        -0.03787137567996979,\n        -0.005912989377975464\n    ],\n    [\n        -0.03518354892730713,\n        0.014087200164794922\n    ],\n    [\n        0.0012147075030952692,\n        -0.004186667036265135\n    ],\n    [\n        -0.024710509926080704,\n        -0.020700331777334213\n    ],\n    [\n        -0.04185379296541214,\n        0.0014115177327767015\n    ],\n    [\n        -0.03350209444761276,\n        0.015772253274917603\n    ],\n    [\n        0.005735530983656645,\n        -0.0002840104280039668\n    ],\n    [\n        -0.02673310786485672,\n        0.00039326201658695936\n    ],\n    [\n        -0.03411312401294708,\n        0.022743642330169678\n    ],\n    [\n        -0.018242476508021355,\n        0.03429355099797249\n    ],\n    [\n        -0.0023219813592731953,\n        0.01553787849843502\n    ],\n    [\n        -0.02744217962026596,\n        0.021908920258283615\n    ],\n    [\n        -0.03493708372116089,\n        0.03926543518900871\n    ],\n    [\n        -0.02066308818757534,\n        0.0458429753780365\n    ]\n]),\n  np.array([\n    [\n        0.00869621243327856,\n        0.06342355161905289\n    ],\n    [\n        -0.014758910983800888,\n        0.0552845261991024\n    ],\n    [\n        -0.029649749398231506,\n        0.034401874989271164\n    ],\n    [\n        -0.046270567923784256,\n        0.012014398351311684\n    ],\n    [\n        -0.05718713626265526,\n        -0.0037784259766340256\n    ],\n    [\n        -0.016072353348135948,\n        0.017048224806785583\n    ],\n    [\n        -0.025812264531850815,\n        0.0020049065351486206\n    ],\n    [\n        -0.030206194147467613,\n        0.006923656910657883\n    ],\n    [\n        -0.02631286159157753,\n        0.019974641501903534\n    ],\n    [\n        -0.0011711501283571124,\n        0.004105702042579651\n    ],\n    [\n        -0.017242727801203728,\n        -0.014379811473190784\n    ],\n    [\n        -0.02630922943353653,\n        0.003256156574934721\n    ],\n    [\n        -0.02199636772274971,\n        0.021970044821500778\n    ],\n    [\n        0.009917655028402805,\n        -0.012370403856039047\n    ],\n    [\n        -0.007691452279686928,\n        -0.023522501811385155\n    ],\n    [\n        -0.014989201910793781,\n        -0.008863812312483788\n    ],\n    [\n        -0.006960082799196243,\n        0.011055674403905869\n    ],\n    [\n        0.01612447388470173,\n        -0.01740691438317299\n    ],\n    [\n        0.0039054276421666145,\n        -0.03596469387412071\n    ],\n    [\n        -0.00844886526465416,\n        -0.02762819081544876\n    ],\n    [\n        -0.005199009086936712,\n        -0.007449956610798836\n    ]\n]),\n  # Bad hands\n  np.array([\n    [\n        -0.02649395354092121,\n        0.07586448639631271\n    ],\n    [\n        -0.013610031455755234,\n        0.05367773026227951\n    ],\n    [\n        -0.006133330520242453,\n        0.02758186124265194\n    ],\n    [\n        -0.010401126928627491,\n        0.0007819028105586767\n    ],\n    [\n        -0.021408597007393837,\n        -0.014528774656355381\n    ],\n    [\n        0.009956181980669498,\n        0.00026801577769219875\n    ],\n    [\n        -0.00464448519051075,\n        -0.01720505952835083\n    ],\n    [\n        -0.02522694319486618,\n        -0.019957438111305237\n    ],\n    [\n        -0.04027974605560303,\n        -0.0023881951346993446\n    ],\n    [\n        0.00296844937838614,\n        -0.0014872986357659101\n    ],\n    [\n        -0.012634705752134323,\n        -0.0272819884121418\n    ],\n    [\n        -0.039058927446603775,\n        -0.020080093294382095\n    ],\n    [\n        -0.047044262290000916,\n        -0.009573986753821373\n    ],\n    [\n        -0.007988198660314083,\n        -0.002086975611746311\n    ],\n    [\n        -0.02848757617175579,\n        -0.023644987493753433\n    ],\n    [\n        -0.04699801281094551,\n        -0.017425235360860825\n    ],\n    [\n        -0.05115516483783722,\n        -0.002260263077914715\n    ],\n    [\n        -0.027468876913189888,\n        0.007027828600257635\n    ],\n    [\n        -0.0404910184442997,\n        -0.007625536993145943\n    ],\n    [\n        -0.05549226328730583,\n        -0.011094962246716022\n    ],\n    [\n        -0.05717645213007927,\n        0.001241365447640419\n    ]\n]),\n  np.array([\n    [\n        0.016879206523299217,\n        0.06488842517137527\n    ],\n    [\n        0.030000008642673492,\n        0.058556750416755676\n    ],\n    [\n        0.04648403823375702,\n        0.04348308593034744\n    ],\n    [\n        0.05654970183968544,\n        0.03002656251192093\n    ],\n    [\n        0.04536127299070358,\n        0.01602254807949066\n    ],\n    [\n        0.0045753843151032925,\n        0.010176194831728935\n    ],\n    [\n        0.023769041523337364,\n        0.004979223478585482\n    ],\n    [\n        0.030029073357582092,\n        0.011560304090380669\n    ],\n    [\n        0.02044783905148506,\n        0.028031064197421074\n    ],\n    [\n        -0.006397819146513939,\n        -0.0012518574949353933\n    ],\n    [\n        0.026782173663377762,\n        -0.011282525956630707\n    ],\n    [\n        0.032502181828022,\n        0.0033670575357973576\n    ],\n    [\n        0.01831945963203907,\n        0.011638746596872807\n    ],\n    [\n        -0.002799457870423794,\n        -0.007266357075423002\n    ],\n    [\n        0.0292559415102005,\n        -0.01166866160929203\n    ],\n    [\n        0.037841975688934326,\n        0.00023397617042064667\n    ],\n    [\n        0.016884449869394302,\n        0.0097980797290802\n    ],\n    [\n        0.003956004045903683,\n        -0.003162647131830454\n    ],\n    [\n        0.026327259838581085,\n        -0.010074550285935402\n    ],\n    [\n        0.03561662137508392,\n        -0.00250160600990057\n    ],\n    [\n        0.020665550604462624,\n        0.00030934554524719715\n    ]\n]),\n  np.array([\n    [\n        -0.03186393529176712,\n        0.08203932642936707\n    ],\n    [\n        -0.025345735251903534,\n        0.05519658327102661\n    ],\n    [\n        -0.008709168061614037,\n        0.03099256567656994\n    ],\n    [\n        0.010847222059965134,\n        0.008423307910561562\n    ],\n    [\n        0.022230790928006172,\n        0.0020201709121465683\n    ],\n    [\n        -0.009009921923279762,\n        -0.008283589035272598\n    ],\n    [\n        0.019622348248958588,\n        -0.009991114027798176\n    ],\n    [\n        0.032256778329610825,\n        -0.003084032330662012\n    ],\n    [\n        0.028126895427703857,\n        0.016508901491761208\n    ],\n    [\n        -0.004356123507022858,\n        -0.004699832759797573\n    ],\n    [\n        0.029299527406692505,\n        -0.013097800314426422\n    ],\n    [\n        0.03533375635743141,\n        0.003849937114864588\n    ],\n    [\n        0.024109825491905212,\n        0.016723496839404106\n    ],\n    [\n        0.005262988153845072,\n        0.002912316471338272\n    ],\n    [\n        0.034778572618961334,\n        0.0018688356503844261\n    ],\n    [\n        0.03911175578832626,\n        0.013549940660595894\n    ],\n    [\n        0.029551304876804352,\n        0.02772226184606552\n    ],\n    [\n        0.010793562978506088,\n        0.021405840292572975\n    ],\n    [\n        0.0344012975692749,\n        0.015123767778277397\n    ],\n    [\n        0.04319383203983307,\n        0.02083425596356392\n    ],\n    [\n        0.03471575304865837,\n        0.031111901625990868\n    ]\n]),\n  np.array([\n    [\n        -0.057593829929828644,\n        0.05003013461828232\n    ],\n    [\n        -0.04780852794647217,\n        0.01420062966644764\n    ],\n    [\n        -0.02566547319293022,\n        -0.005775886587798595\n    ],\n    [\n        -0.002860656473785639,\n        -0.015057958662509918\n    ],\n    [\n        0.016268150880932808,\n        -0.012751154601573944\n    ],\n    [\n        -0.01229008100926876,\n        -0.01971609517931938\n    ],\n    [\n        0.017415165901184082,\n        -0.02617277391254902\n    ],\n    [\n        0.02710864506661892,\n        -0.026839910075068474\n    ],\n    [\n        0.019000912085175514,\n        -0.022603092715144157\n    ],\n    [\n        -0.0023495845962315798,\n        -0.0032946676947176456\n    ],\n    [\n        0.032241594046354294,\n        -0.019970133900642395\n    ],\n    [\n        0.03622119128704071,\n        -0.01996714621782303\n    ],\n    [\n        0.029486197978258133,\n        -0.015086418017745018\n    ],\n    [\n        0.007211004383862019,\n        0.010699771344661713\n    ],\n    [\n        0.038413409143686295,\n        -0.0011012647300958633\n    ],\n    [\n        0.04096774011850357,\n        -0.0029912013560533524\n    ],\n    [\n        0.03454943001270294,\n        0.0019775256514549255\n    ],\n    [\n        0.009700361639261246,\n        0.029427655041217804\n    ],\n    [\n        0.032066136598587036,\n        0.019047964364290237\n    ],\n    [\n        0.03570736199617386,\n        0.01397146936506033\n    ],\n    [\n        0.02601565234363079,\n        0.019583869725465775\n    ]\n]),\n  np.array([\n    [\n        0.03213716670870781,\n        0.076841339468956\n    ],\n    [\n        0.01155097782611847,\n        0.06301834434270859\n    ],\n    [\n        0.001677539199590683,\n        0.0366494320333004\n    ],\n    [\n        -0.006620293483138084,\n        0.010158291086554527\n    ],\n    [\n        -0.008307866752147675,\n        -0.007030523847788572\n    ],\n    [\n        -0.02278372272849083,\n        0.008231471292674541\n    ],\n    [\n        -0.02049906924366951,\n        -0.01345473900437355\n    ],\n    [\n        -0.011705383658409119,\n        -0.022929523140192032\n    ],\n    [\n        -0.006295385770499706,\n        -0.014364213682711124\n    ],\n    [\n        -0.007938516326248646,\n        -0.0005870785098522902\n    ],\n    [\n        -0.014102193526923656,\n        -0.034972772002220154\n    ],\n    [\n        -0.005143561400473118,\n        -0.035711608827114105\n    ],\n    [\n        -0.0016571935266256332,\n        -0.026455562561750412\n    ],\n    [\n        0.012728872708976269,\n        -0.006351148709654808\n    ],\n    [\n        0.010705914348363876,\n        -0.03804527223110199\n    ],\n    [\n        0.019211333245038986,\n        -0.042688094079494476\n    ],\n    [\n        0.021535702049732208,\n        -0.032626692205667496\n    ],\n    [\n        0.03462950512766838,\n        -0.0009271679446101189\n    ],\n    [\n        0.038115885108709335,\n        -0.02955436334013939\n    ],\n    [\n        0.045648541301488876,\n        -0.042652059346437454\n    ],\n    [\n        0.04763372242450714,\n        -0.04007744789123535\n    ]\n])\n]",
      "language": "python",
      "output": "undefined"
    },
    "index": 2,
    "createdBy": "sbxpricfei",
    "lastEditedBy": "sbxpricfei",
    "topic": "wfhpfmczdk"
  },
  {
    "id": "Od4Bqxg6Qq",
    "type": "code",
    "data": {
      "code": "for i in range(0,len(goal_gestures)):\n  goal_gestures[i] = standard_normalization(goal_gestures[i])\n  \nsplit = 14\nhand_gestures, pose_gestures = goal_gestures[0:split], goal_gestures[split:]\nlen(goal_gestures)",
      "language": "python",
      "output": "14"
    },
    "index": 3,
    "createdBy": "cgflsjntse",
    "lastEditedBy": "sbxpricfei",
    "topic": "wfhpfmczdk"
  },
  {
    "id": "2pzXMmltgP",
    "type": "code",
    "data": {
      "code": "import js\n\ndef choose_close_goal_gesture(landmarks, goals):\n input_pose = standard_normalization(np.array(landmarks.to_py()))\n index, best_similarity = max(enumerate(compute_procrustes(input_pose, goal) for goal in goals), key=lambda x: x[1])\n return [index, best_similarity]\n\ndef choose_close_pose(landmarks):\n  return choose_close_goal_gesture(landmarks[0:23], pose_gestures)\n  \ndef choose_close_hands(landmarks):\n  return choose_close_goal_gesture(landmarks, hand_gestures)\n\njs.window.choose_close_pose = choose_close_pose\njs.window.choose_close_hands = choose_close_hands",
      "language": "python",
      "output": "undefined"
    },
    "index": 4,
    "createdBy": "cgflsjntse",
    "lastEditedBy": "sbxpricfei",
    "topic": "wfhpfmczdk"
  },
  {
    "id": "lRIv_FMtAZ",
    "type": "header",
    "data": {
      "text": "Non verbal language",
      "level": 1
    },
    "index": 5,
    "createdBy": "cgflsjntse",
    "lastEditedBy": "sbxpricfei",
    "topic": "wfhpfmczdk"
  },
  {
    "id": "FSj3Moigrk",
    "type": "code",
    "data": {
      "code": "<video id=\"webcam\" style=\"width: 1280px; height: 720px;\" autoplay playsinline></video>\n<script type=\"module\">\nimport {HandLandmarker,FilesetResolver,DrawingUtils} from \"https://cdn.skypack.dev/@mediapipe/tasks-vision@0.10.0\";\nconst vision = await FilesetResolver.forVisionTasks(\"https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@0.10.0/wasm\");\nconst handLandmarker = await HandLandmarker.createFromOptions(vision, {\n    baseOptions: {\n      modelAssetPath: `https://storage.googleapis.com/mediapipe-models/hand_landmarker/hand_landmarker/float16/1/hand_landmarker.task`,\n      delegate: \"GPU\"\n    },\n    runningMode: \"video\",\n    numHands: 1\n\n});\nconst video = document.getElementById(\"webcam\");\nlet lastVideoTime = -1;\nasync function predictWebcam() {\n    let startTimeMs = performance.now();\n    if (lastVideoTime !== video.currentTime) {\n        lastVideoTime = video.currentTime;\n        const results = handLandmarker.detectForVideo(video, startTimeMs);\n        \n        if (results.worldLandmarks.length !== 0) {\n           console.log(results.worldLandmarks[0].map(l => ([l.x, l.y, l.z])))\n           const goal = choose_close_goal_pose(results.worldLandmarks[0].map(l => ([l.x, l.y, l.z])), 'hands').toJs();\n           console.log(goal)\n           // handSim.next(goal);\n        }\n    }\n    requestAnimationFrame(predictWebcam); \n}\n\nvideo.addEventListener(\"loadeddata\", predictWebcam);\nstartVideo(video)\n</script>",
      "language": "html",
      "output": ""
    },
    "index": 6,
    "createdBy": "sbxpricfei",
    "lastEditedBy": "sbxpricfei",
    "topic": "wfhpfmczdk"
  },
  {
    "id": "GtkTmDp71a",
    "type": "header",
    "data": {
      "text": "Video",
      "level": 2
    },
    "index": 7,
    "createdBy": "sbxpricfei",
    "lastEditedBy": "sbxpricfei",
    "topic": "wfhpfmczdk"
  },
  {
    "id": "j9IG5mLLX6",
    "type": "header",
    "data": {
      "text": "Hand Landmarker",
      "level": 2
    },
    "index": 8,
    "createdBy": "cgflsjntse",
    "lastEditedBy": "sbxpricfei",
    "topic": "wfhpfmczdk"
  },
  {
    "id": "sXX4QgfDId",
    "type": "code",
    "data": {
      "code": "<script type=\"module\">\nclass Lexer {\n  constructor(rules) {\n    this.state = '';\n    this.rules = rules;\n    // TODO: Implement large match\n    this.policies = {\n     'first_match': (input) => {\n       for (let rule of this.rules) {\n        if (rule.match(this.state, input)) {\n          this.state = '';\n          return rule.apply(input);\n        }\n       }\n      },\n      'all_matches': (input) => {\n        const matches = []\n        for (let rule of this.rules) {\n         if (rule.match(this.state, input)) {\n          matches.push(rule.apply(input));\n         }\n        }\n        if (matches.length > 0) {\n          this.state = '';\n        }\n        return matches;\n      }\n    }\n  }\n  analyze = (input, policy='first_match') => {\n    this.state += input;\n    return this.policies[policy](input)\n  };\n}\n\nwindow.lexer = new Lexer([\n  {\n    match: (state, input) => /^00$/g.test(state),\n    apply: (input) => 'A',\n  }\n]);\nimport {Subject,zip,map,tap,combineLatest, filter, interval} from 'https://cdn.jsdelivr.net/npm/rxjs@7.8.1/+esm'\n\nwindow.poseSim = new Subject();\nwindow.handSim = new Subject();\nwindow.objectClassification = new Subject();\n\ncombineLatest([handSim,poseSim]).pipe(\n  tap(x => console.log(x[0][1], x[1][1])),\n  filter(x => x[0][1] > 0.9 && x[0][1]  > 0.8),\n  map(x => x.map(x => x[0]).join(\"\")),\n  map(x => lexer.analyze(x))\n).subscribe(console.log);\n  \nwindow.startVideo = async (videoElement, peerId) => {\n  const stream = await navigator.mediaDevices.getUserMedia({video: true, audio: false});\n  if (peerId) {\n    peer.call(peerId, stream).on('stream', peerStream => {\n      console.log(peerStream);\n      videoElement.srcObject = peerStream;\n      videoElement.play();\n    });\n  } else {\n    videoElement.srcObject = stream;\n    videoElement.play();\n  }\n}\n</script>",
      "language": "html",
      "output": "<script type=\"module\">\nclass Lexer {\n  constructor(rules) {\n    this.state = '';\n    this.rules = rules;\n    // TODO: Implement large match\n    this.policies = {\n     'first_match': (input) => {\n       for (let rule of this.rules) {\n        if (rule.match(this.state, input)) {\n          this.state = '';\n          return rule.apply(input);\n        }\n       }\n      },\n      'all_matches': (input) => {\n        const matches = []\n        for (let rule of this.rules) {\n         if (rule.match(this.state, input)) {\n          matches.push(rule.apply(input));\n         }\n        }\n        if (matches.length > 0) {\n          this.state = '';\n        }\n        return matches;\n      }\n    }\n  }\n  analyze = (input, policy='first_match') => {\n    this.state += input;\n    return this.policies[policy](input)\n  };\n}\n\nwindow.lexer = new Lexer([\n  {\n    match: (state, input) => /^00$/g.test(state),\n    apply: (input) => 'A',\n  }\n]);\nimport {Subject,zip,map,tap,combineLatest, filter, interval} from 'https://cdn.jsdelivr.net/npm/rxjs@7.8.1/+esm'\n\nwindow.poseSim = new Subject();\nwindow.handSim = new Subject();\nwindow.objectClassification = new Subject();\n\ncombineLatest([handSim,poseSim]).pipe(\n  tap(x => console.log(x[0][1], x[1][1])),\n  filter(x => x[0][1] > 0.9 && x[0][1]  > 0.8),\n  map(x => x.map(x => x[0]).join(\"\")),\n  map(x => lexer.analyze(x))\n).subscribe(console.log);\n  \nwindow.startVideo = async (videoElement, peerId) => {\n  const stream = await navigator.mediaDevices.getUserMedia({video: true, audio: false});\n  if (peerId) {\n    peer.call(peerId, stream).on('stream', peerStream => {\n      console.log(peerStream);\n      videoElement.srcObject = peerStream;\n      videoElement.play();\n    });\n  } else {\n    videoElement.srcObject = stream;\n    videoElement.play();\n  }\n}\n</script>"
    },
    "index": 9,
    "createdBy": "sbxpricfei",
    "lastEditedBy": "sbxpricfei",
    "topic": "wfhpfmczdk"
  },
  {
    "id": "RKUkGLxkwt",
    "type": "header",
    "data": {
      "text": "Pose Landmarker",
      "level": 2
    },
    "index": 10,
    "createdBy": "sbxpricfei",
    "lastEditedBy": "sbxpricfei",
    "topic": "wfhpfmczdk"
  },
  {
    "id": "f_rUIPH6dn",
    "type": "code",
    "data": {
      "code": "<video id=\"webcam\" style=\"width: 1280px; height: 720px;\" autoplay playsinline></video>\n<script type=\"module\">\nwindow.startVideo = async (videoElement, peerId) => {\n  const stream = await navigator.mediaDevices.getUserMedia({video: true, audio: false});\n  if (peerId) {\n    peer.call(peerId, stream).on('stream', peerStream => {\n      videoElement.srcObject = peerStream;\n      videoElement.play();\n    });\n  } else {\n    videoElement.srcObject = stream;\n    videoElement.play();\n  }\n}\nstartVideo(document.getElementById(\"webcam\"))\n</script>",
      "language": "html",
      "output": "<video id=\"webcam\" style=\"width: 1280px; height: 720px;\" autoplay=\"\" playsinline=\"\"></video>\n<script type=\"module\">\nwindow.startVideo = async (videoElement, peerId) => {\n  const stream = await navigator.mediaDevices.getUserMedia({video: true, audio: false});\n  if (peerId) {\n    peer.call(peerId, stream).on('stream', peerStream => {\n      videoElement.srcObject = peerStream;\n      videoElement.play();\n    });\n  } else {\n    videoElement.srcObject = stream;\n    videoElement.play();\n  }\n}\nstartVideo(document.getElementById(\"webcam\"))\n</script>"
    },
    "index": 11,
    "createdBy": "sbxpricfei",
    "lastEditedBy": "sbxpricfei",
    "topic": "wfhpfmczdk"
  },
  {
    "id": "4I8F9vD1Kd",
    "type": "paragraph",
    "data": {
      "text": ""
    },
    "index": 12,
    "createdBy": "sbxpricfei",
    "lastEditedBy": "sbxpricfei",
    "topic": "wfhpfmczdk"
  },
  {
    "id": "ACJk0wOHEe",
    "type": "paragraph",
    "data": {
      "text": ""
    },
    "index": 13,
    "createdBy": "sbxpricfei",
    "lastEditedBy": "sbxpricfei",
    "topic": "wfhpfmczdk"
  },
  {
    "id": "UIJD513s5P",
    "type": "code",
    "data": {
      "code": "<script type=\"module\">\nimport {PoseLandmarker,FilesetResolver} from \"https://cdn.skypack.dev/@mediapipe/tasks-vision@0.10.0\";\nconst vision = await FilesetResolver.forVisionTasks(\"https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@0.10.0/wasm\");\nconst poseLandmarker = await PoseLandmarker.createFromOptions(vision, {\n    baseOptions: {\n        modelAssetPath: `https://storage.googleapis.com/mediapipe-models/pose_landmarker/pose_landmarker_heavy/float16/latest/pose_landmarker_heavy.task`,\n        delegate: \"GPU\"\n    },\n    runningMode: \"video\",\n    numPoses: 1,\n    minPoseDetectionConfidence: 0.8,\n    minPosePresenceConfidence: 0.8,\n    minTrackingConfidence: 0.8\n});\n\nconst video = document.getElementById(\"webcam\");\nlet lastVideoTime = -1;\nasync function predictWebcam() {\n    let startTimeMs = performance.now();\n    if (lastVideoTime !== video.currentTime) {\n        lastVideoTime = video.currentTime;\n        poseLandmarker.detectForVideo(video, startTimeMs, (results) =>  {\n            if (results.worldLandmarks.length === 0) {\n              return;\n            }\n            // console.log(results.worldLandmarks[0].map(l => ([l.x, l.y, l.z])))\n            const goal = choose_close_goal_pose(results.worldLandmarks[0].map(l => ([l.x, l.y, l.z])), 'pose').toJs();\n            poseSim.next(goal);\n          }\n        );\n    }\n   window.requestAnimationFrame(predictWebcam);\n}\npredictWebcam()\n</script>",
      "language": "html",
      "output": "<script type=\"module\">\nimport {PoseLandmarker,FilesetResolver} from \"https://cdn.skypack.dev/@mediapipe/tasks-vision@0.10.0\";\nconst vision = await FilesetResolver.forVisionTasks(\"https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@0.10.0/wasm\");\nconst poseLandmarker = await PoseLandmarker.createFromOptions(vision, {\n    baseOptions: {\n        modelAssetPath: `https://storage.googleapis.com/mediapipe-models/pose_landmarker/pose_landmarker_heavy/float16/latest/pose_landmarker_heavy.task`,\n        delegate: \"GPU\"\n    },\n    runningMode: \"video\",\n    numPoses: 1,\n    minPoseDetectionConfidence: 0.8,\n    minPosePresenceConfidence: 0.8,\n    minTrackingConfidence: 0.8\n});\n\nconst video = document.getElementById(\"webcam\");\nlet lastVideoTime = -1;\nasync function predictWebcam() {\n    let startTimeMs = performance.now();\n    if (lastVideoTime !== video.currentTime) {\n        lastVideoTime = video.currentTime;\n        poseLandmarker.detectForVideo(video, startTimeMs, (results) =>  {\n            if (results.worldLandmarks.length === 0) {\n              return;\n            }\n            // console.log(results.worldLandmarks[0].map(l => ([l.x, l.y, l.z])))\n            const goal = choose_close_goal_pose(results.worldLandmarks[0].map(l => ([l.x, l.y, l.z])), 'pose').toJs();\n            poseSim.next(goal);\n          }\n        );\n    }\n   window.requestAnimationFrame(predictWebcam);\n}\npredictWebcam()\n</script>"
    },
    "index": 14,
    "createdBy": "sbxpricfei",
    "lastEditedBy": "sbxpricfei",
    "topic": "wfhpfmczdk"
  },
  {
    "id": "JcsAwBc5Za",
    "type": "header",
    "data": {
      "text": "Replication",
      "level": 2
    },
    "index": 15,
    "createdBy": "cgflsjntse",
    "lastEditedBy": "sbxpricfei",
    "topic": "wfhpfmczdk"
  },
  {
    "id": "8g1R5tTwAZ",
    "type": "code",
    "data": {
      "code": "editor.blocks.get$.pipe(\n  first(),\n  map(blocks => {\n    return blocks.map(doc => {\n      delete doc._data.crdts\n      delete doc._data._deleted\n      delete doc._data._deleted\n      delete doc._data._attachments\n      delete doc._data._rev\n      delete doc._data._meta\n      return doc._data\n    })\n  }),\n  map(blocks =>\n    btoa(unescape(encodeURIComponent(JSON.stringify(blocks, null, 2).replaceAll(environment.GITHUB_TOKEN, \"\"))))),\n  commitOnGitHub({\n    owner: \"sanchezcarlosjr\",\n    repo: \"computer-vision-and-graphics\",\n    filePath: \"assets/evanotebooks/14-mediapipe-procrustes-analysis.json\",\n    commitMessage: \"feat: checkout pose from peer\",\n    GITHUB_TOKEN: environment.GITHUB_TOKEN\n   }\n  )\n)",
      "language": "javascript",
      "output": ""
    },
    "index": 16,
    "createdBy": "cgflsjntse",
    "lastEditedBy": "sbxpricfei",
    "topic": "wfhpfmczdk"
  }
]